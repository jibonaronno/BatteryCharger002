
BatteryCharger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800200  00002234  000022c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002234  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a3  0080028e  0080028e  00002356  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002356  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e8  00000000  00000000  000023f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000801c  00000000  00000000  000027e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e78  00000000  00000000  0000a7fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002cd3  00000000  00000000  0000c674  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000acc  00000000  00000000  0000f348  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002705  00000000  00000000  0000fe14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004757  00000000  00000000  00012519  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a0  00000000  00000000  00016c70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	14 c1       	rjmp	.+552    	; 0x22a <__ctors_end>
       2:	00 00       	nop
       4:	43 c1       	rjmp	.+646    	; 0x28c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c1       	rjmp	.+642    	; 0x28c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c1       	rjmp	.+638    	; 0x28c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c1       	rjmp	.+634    	; 0x28c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c1       	rjmp	.+630    	; 0x28c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c1       	rjmp	.+626    	; 0x28c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c1       	rjmp	.+622    	; 0x28c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c1       	rjmp	.+618    	; 0x28c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c1       	rjmp	.+614    	; 0x28c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c1       	rjmp	.+610    	; 0x28c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2f c1       	rjmp	.+606    	; 0x28c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c1       	rjmp	.+602    	; 0x28c <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c1       	rjmp	.+598    	; 0x28c <__bad_interrupt>
      36:	00 00       	nop
      38:	29 c1       	rjmp	.+594    	; 0x28c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c1       	rjmp	.+590    	; 0x28c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c1       	rjmp	.+586    	; 0x28c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c1       	rjmp	.+582    	; 0x28c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c1       	rjmp	.+578    	; 0x28c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c1       	rjmp	.+574    	; 0x28c <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__vector_20>
      54:	1b c1       	rjmp	.+566    	; 0x28c <__bad_interrupt>
      56:	00 00       	nop
      58:	19 c1       	rjmp	.+562    	; 0x28c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__vector_23>
      60:	15 c1       	rjmp	.+554    	; 0x28c <__bad_interrupt>
      62:	00 00       	nop
      64:	13 c1       	rjmp	.+550    	; 0x28c <__bad_interrupt>
      66:	00 00       	nop
      68:	11 c1       	rjmp	.+546    	; 0x28c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0f c1       	rjmp	.+542    	; 0x28c <__bad_interrupt>
      6e:	00 00       	nop
      70:	0d c1       	rjmp	.+538    	; 0x28c <__bad_interrupt>
      72:	00 00       	nop
      74:	0b c1       	rjmp	.+534    	; 0x28c <__bad_interrupt>
      76:	00 00       	nop
      78:	09 c1       	rjmp	.+530    	; 0x28c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	07 c1       	rjmp	.+526    	; 0x28c <__bad_interrupt>
      7e:	00 00       	nop
      80:	05 c1       	rjmp	.+522    	; 0x28c <__bad_interrupt>
      82:	00 00       	nop
      84:	03 c1       	rjmp	.+518    	; 0x28c <__bad_interrupt>
      86:	00 00       	nop
      88:	01 c1       	rjmp	.+514    	; 0x28c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ff c0       	rjmp	.+510    	; 0x28c <__bad_interrupt>
      8e:	00 00       	nop
      90:	fd c0       	rjmp	.+506    	; 0x28c <__bad_interrupt>
      92:	00 00       	nop
      94:	fb c0       	rjmp	.+502    	; 0x28c <__bad_interrupt>
      96:	00 00       	nop
      98:	f9 c0       	rjmp	.+498    	; 0x28c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f7 c0       	rjmp	.+494    	; 0x28c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f5 c0       	rjmp	.+490    	; 0x28c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f3 c0       	rjmp	.+486    	; 0x28c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f1 c0       	rjmp	.+482    	; 0x28c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ef c0       	rjmp	.+478    	; 0x28c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ed c0       	rjmp	.+474    	; 0x28c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	eb c0       	rjmp	.+470    	; 0x28c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e9 c0       	rjmp	.+466    	; 0x28c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e7 c0       	rjmp	.+462    	; 0x28c <__bad_interrupt>
      be:	00 00       	nop
      c0:	e5 c0       	rjmp	.+458    	; 0x28c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e3 c0       	rjmp	.+454    	; 0x28c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e1 c0       	rjmp	.+450    	; 0x28c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	df c0       	rjmp	.+446    	; 0x28c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	dd c0       	rjmp	.+442    	; 0x28c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	db c0       	rjmp	.+438    	; 0x28c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d9 c0       	rjmp	.+434    	; 0x28c <__bad_interrupt>
      da:	00 00       	nop
      dc:	d7 c0       	rjmp	.+430    	; 0x28c <__bad_interrupt>
      de:	00 00       	nop
      e0:	d5 c0       	rjmp	.+426    	; 0x28c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	79 0b       	sbc	r23, r25
      e6:	7c 0b       	sbc	r23, r28
      e8:	6b 0b       	sbc	r22, r27
      ea:	6f 0b       	sbc	r22, r31
      ec:	75 0b       	sbc	r23, r21
      ee:	b3 0b       	sbc	r27, r19
      f0:	80 0b       	sbc	r24, r16
      f2:	84 0b       	sbc	r24, r20
      f4:	8a 0b       	sbc	r24, r26
      f6:	8e 0b       	sbc	r24, r30
      f8:	92 0b       	sbc	r25, r18
      fa:	98 0b       	sbc	r25, r24
      fc:	9c 0b       	sbc	r25, r28
      fe:	a0 0b       	sbc	r26, r16
     100:	b3 0b       	sbc	r27, r19
     102:	a6 0b       	sbc	r26, r22
     104:	aa 0b       	sbc	r26, r26
     106:	ae 0b       	sbc	r26, r30

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
     1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
     1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
     20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_start>:
     228:	a9 06       	cpc	r10, r25

0000022a <__ctors_end>:
     22a:	11 24       	eor	r1, r1
     22c:	1f be       	out	0x3f, r1	; 63
     22e:	cf ef       	ldi	r28, 0xFF	; 255
     230:	d1 e2       	ldi	r29, 0x21	; 33
     232:	de bf       	out	0x3e, r29	; 62
     234:	cd bf       	out	0x3d, r28	; 61
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0c bf       	out	0x3c, r16	; 60

0000023a <__do_copy_data>:
     23a:	12 e0       	ldi	r17, 0x02	; 2
     23c:	a0 e0       	ldi	r26, 0x00	; 0
     23e:	b2 e0       	ldi	r27, 0x02	; 2
     240:	e4 e3       	ldi	r30, 0x34	; 52
     242:	f2 e2       	ldi	r31, 0x22	; 34
     244:	00 e0       	ldi	r16, 0x00	; 0
     246:	0b bf       	out	0x3b, r16	; 59
     248:	02 c0       	rjmp	.+4      	; 0x24e <__do_copy_data+0x14>
     24a:	07 90       	elpm	r0, Z+
     24c:	0d 92       	st	X+, r0
     24e:	ae 38       	cpi	r26, 0x8E	; 142
     250:	b1 07       	cpc	r27, r17
     252:	d9 f7       	brne	.-10     	; 0x24a <__do_copy_data+0x10>

00000254 <__do_clear_bss>:
     254:	23 e0       	ldi	r18, 0x03	; 3
     256:	ae e8       	ldi	r26, 0x8E	; 142
     258:	b2 e0       	ldi	r27, 0x02	; 2
     25a:	01 c0       	rjmp	.+2      	; 0x25e <.do_clear_bss_start>

0000025c <.do_clear_bss_loop>:
     25c:	1d 92       	st	X+, r1

0000025e <.do_clear_bss_start>:
     25e:	a1 33       	cpi	r26, 0x31	; 49
     260:	b2 07       	cpc	r27, r18
     262:	e1 f7       	brne	.-8      	; 0x25c <.do_clear_bss_loop>

00000264 <__do_global_ctors>:
     264:	11 e0       	ldi	r17, 0x01	; 1
     266:	c5 e1       	ldi	r28, 0x15	; 21
     268:	d1 e0       	ldi	r29, 0x01	; 1
     26a:	00 e0       	ldi	r16, 0x00	; 0
     26c:	06 c0       	rjmp	.+12     	; 0x27a <__do_global_ctors+0x16>
     26e:	21 97       	sbiw	r28, 0x01	; 1
     270:	01 09       	sbc	r16, r1
     272:	80 2f       	mov	r24, r16
     274:	fe 01       	movw	r30, r28
     276:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <__tablejump2__>
     27a:	c4 31       	cpi	r28, 0x14	; 20
     27c:	d1 07       	cpc	r29, r17
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	08 07       	cpc	r16, r24
     282:	a9 f7       	brne	.-22     	; 0x26e <__do_global_ctors+0xa>
     284:	0e 94 34 0a 	call	0x1468	; 0x1468 <main>
     288:	0c 94 18 11 	jmp	0x2230	; 0x2230 <_exit>

0000028c <__bad_interrupt>:
     28c:	b9 ce       	rjmp	.-654    	; 0x0 <__vectors>

0000028e <_Z10t1callbackv>:
	eeprom_write_block ((void *)buffer, (void *)30, _size);
}

void ReStoreEnergyReading(char *buffer, uint8_t _size)
{
	eeprom_read_block ((void *)buffer, (void *)30, _size);
     28e:	21 e0       	ldi	r18, 0x01	; 1
     290:	20 93 d3 02 	sts	0x02D3, r18	; 0x8002d3 <t1tick001>
     294:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <t1tickCount002>
     298:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <t1tickCount002+0x1>
     29c:	84 36       	cpi	r24, 0x64	; 100
     29e:	91 05       	cpc	r25, r1
     2a0:	34 f4       	brge	.+12     	; 0x2ae <_Z10t1callbackv+0x20>
     2a2:	01 96       	adiw	r24, 0x01	; 1
     2a4:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <t1tickCount002+0x1>
     2a8:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <t1tickCount002>
     2ac:	06 c0       	rjmp	.+12     	; 0x2ba <_Z10t1callbackv+0x2c>
     2ae:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <t1tickCount002+0x1>
     2b2:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <t1tickCount002>
     2b6:	20 93 d0 02 	sts	0x02D0, r18	; 0x8002d0 <t1tick002>
     2ba:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <t1tickCount003>
     2be:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <t1tickCount003+0x1>
     2c2:	88 3c       	cpi	r24, 0xC8	; 200
     2c4:	91 05       	cpc	r25, r1
     2c6:	34 f4       	brge	.+12     	; 0x2d4 <_Z10t1callbackv+0x46>
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <t1tickCount003+0x1>
     2ce:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <t1tickCount003>
     2d2:	07 c0       	rjmp	.+14     	; 0x2e2 <_Z10t1callbackv+0x54>
     2d4:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <t1tickCount003+0x1>
     2d8:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <t1tickCount003>
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <t1tick003>
     2e2:	53 c5       	rjmp	.+2726   	; 0xd8a <_Z24ButtonMatrixPrimaryCyclev>

000002e4 <_Z11StoreBufferPhh>:
     2e4:	46 2f       	mov	r20, r22
     2e6:	50 e0       	ldi	r21, 0x00	; 0
     2e8:	6a e0       	ldi	r22, 0x0A	; 10
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	0c 94 01 11 	jmp	0x2202	; 0x2202 <eeprom_write_block>

000002f0 <_Z13RestoreBufferPhh>:
     2f0:	46 2f       	mov	r20, r22
     2f2:	50 e0       	ldi	r21, 0x00	; 0
     2f4:	6a e0       	ldi	r22, 0x0A	; 10
     2f6:	70 e0       	ldi	r23, 0x00	; 0
     2f8:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <eeprom_read_block>

000002fc <setup>:
  public:
    //****************************
    //  Configuration
    //****************************
    void initialize(unsigned long microseconds=1000000) __attribute__((always_inline)) {
	TCCR1B = _BV(WGM13);        // set mode as phase and frequency correct pwm, stop the timer
     2fc:	80 e1       	ldi	r24, 0x10	; 16
     2fe:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	TCCR1A = 0;                 // clear control register A 
     302:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	setPeriod(microseconds);
    }
    void setPeriod(unsigned long microseconds) __attribute__((always_inline)) {
	const unsigned long cycles = (F_CPU / 2000000) * microseconds;
	if (cycles < TIMER1_RESOLUTION) {
		clockSelectBits = _BV(CS10);
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles;
     30c:	20 e4       	ldi	r18, 0x40	; 64
     30e:	3c e9       	ldi	r19, 0x9C	; 156
     310:	30 93 30 03 	sts	0x0330, r19	; 0x800330 <_ZN8TimerOne9pwmPeriodE+0x1>
     314:	20 93 2f 03 	sts	0x032F, r18	; 0x80032f <_ZN8TimerOne9pwmPeriodE>
		pwmPeriod = cycles / 1024;
	} else {
		clockSelectBits = _BV(CS12) | _BV(CS10);
		pwmPeriod = TIMER1_RESOLUTION - 1;
	}
	ICR1 = pwmPeriod;
     318:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     31c:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	TCCR1B = _BV(WGM13) | clockSelectBits;
     320:	91 e1       	ldi	r25, 0x11	; 17
     322:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>

    //****************************
    //  Interrupt Function
    //****************************
    void attachInterrupt(void (*isr)()) __attribute__((always_inline)) {
	isrCallback = isr;
     326:	27 e4       	ldi	r18, 0x47	; 71
     328:	31 e0       	ldi	r19, 0x01	; 1
     32a:	30 93 2d 03 	sts	0x032D, r19	; 0x80032d <_ZN8TimerOne11isrCallbackE+0x1>
     32e:	20 93 2c 03 	sts	0x032C, r18	; 0x80032c <_ZN8TimerOne11isrCallbackE>
	TIMSK1 = _BV(TOIE1);
     332:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>

void setup() {
  Timer1.initialize(5000); //5000 Microseconds = 5 miliseconds
  Timer1.attachInterrupt(t1callback);
  
  pinMode(14, INPUT); //Button Up
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	8e e0       	ldi	r24, 0x0E	; 14
     33a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <pinMode>
  pinMode(15, INPUT); //Button Down
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	8f e0       	ldi	r24, 0x0F	; 15
     342:	0e 94 b4 0b 	call	0x1768	; 0x1768 <pinMode>
  pinMode(16, INPUT); //Button Menu
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	80 e1       	ldi	r24, 0x10	; 16
     34a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <pinMode>
  digitalWrite(14, HIGH);
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	8e e0       	ldi	r24, 0x0E	; 14
     352:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <digitalWrite>
  digitalWrite(15, HIGH);
     356:	61 e0       	ldi	r22, 0x01	; 1
     358:	8f e0       	ldi	r24, 0x0F	; 15
     35a:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <digitalWrite>
  digitalWrite(16, HIGH);
     35e:	61 e0       	ldi	r22, 0x01	; 1
     360:	80 e1       	ldi	r24, 0x10	; 16
     362:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <digitalWrite>
  
  // LED PINS
  pinMode(7, OUTPUT);
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	87 e0       	ldi	r24, 0x07	; 7
     36a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <pinMode>
  pinMode(8, OUTPUT);
     36e:	61 e0       	ldi	r22, 0x01	; 1
     370:	88 e0       	ldi	r24, 0x08	; 8
     372:	0e 94 b4 0b 	call	0x1768	; 0x1768 <pinMode>
  pinMode(9, OUTPUT);
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	89 e0       	ldi	r24, 0x09	; 9
     37a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <pinMode>
  pinMode(10, OUTPUT);
     37e:	61 e0       	ldi	r22, 0x01	; 1
     380:	8a e0       	ldi	r24, 0x0A	; 10
     382:	0e 94 b4 0b 	call	0x1768	; 0x1768 <pinMode>
  pinMode(11, OUTPUT);
     386:	61 e0       	ldi	r22, 0x01	; 1
     388:	8b e0       	ldi	r24, 0x0B	; 11
     38a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <pinMode>
  pinMode(12, OUTPUT);
     38e:	61 e0       	ldi	r22, 0x01	; 1
     390:	8c e0       	ldi	r24, 0x0C	; 12
     392:	0e 94 b4 0b 	call	0x1768	; 0x1768 <pinMode>
  pinMode(13, OUTPUT);
     396:	61 e0       	ldi	r22, 0x01	; 1
     398:	8d e0       	ldi	r24, 0x0D	; 13
     39a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <pinMode>
  digitalWrite(13, LOW);
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	8d e0       	ldi	r24, 0x0D	; 13
     3a2:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <digitalWrite>
  
  //MAINS FAIL PIN
  pinMode(A3, INPUT);
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	89 e3       	ldi	r24, 0x39	; 57
     3aa:	0e 94 b4 0b 	call	0x1768	; 0x1768 <pinMode>
  digitalWrite(A3, HIGH);
     3ae:	61 e0       	ldi	r22, 0x01	; 1
     3b0:	89 e3       	ldi	r24, 0x39	; 57
     3b2:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <digitalWrite>
  
  //BOOST ON PIN INPUT
  pinMode(45, INPUT);
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	8d e2       	ldi	r24, 0x2D	; 45
     3ba:	0e 94 b4 0b 	call	0x1768	; 0x1768 <pinMode>
  digitalWrite(45, HIGH);
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	8d e2       	ldi	r24, 0x2D	; 45
     3c2:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <digitalWrite>
  
  //BOOST ON RELAY
  pinMode(4, OUTPUT);
     3c6:	61 e0       	ldi	r22, 0x01	; 1
     3c8:	84 e0       	ldi	r24, 0x04	; 4
     3ca:	0e 94 b4 0b 	call	0x1768	; 0x1768 <pinMode>
  digitalWrite(4, LOW);
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	84 e0       	ldi	r24, 0x04	; 4
     3d2:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <digitalWrite>
  
  //BOOST ON LED
  pinMode(11, OUTPUT);
     3d6:	61 e0       	ldi	r22, 0x01	; 1
     3d8:	8b e0       	ldi	r24, 0x0B	; 11
     3da:	0e 94 b4 0b 	call	0x1768	; 0x1768 <pinMode>
  digitalWrite(11, LOW);
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	8b e0       	ldi	r24, 0x0B	; 11
     3e2:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <digitalWrite>
  
  //Relay PINS
  pinMode(2, OUTPUT);
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	82 e0       	ldi	r24, 0x02	; 2
     3ea:	0e 94 b4 0b 	call	0x1768	; 0x1768 <pinMode>
  pinMode(3, OUTPUT);
     3ee:	61 e0       	ldi	r22, 0x01	; 1
     3f0:	83 e0       	ldi	r24, 0x03	; 3
     3f2:	0e 94 b4 0b 	call	0x1768	; 0x1768 <pinMode>
  pinMode(4, OUTPUT);
     3f6:	61 e0       	ldi	r22, 0x01	; 1
     3f8:	84 e0       	ldi	r24, 0x04	; 4
     3fa:	0e 94 b4 0b 	call	0x1768	; 0x1768 <pinMode>
  pinMode(5, OUTPUT);
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	85 e0       	ldi	r24, 0x05	; 5
     402:	0e 94 b4 0b 	call	0x1768	; 0x1768 <pinMode>
  
  analogReference(INTERNAL2V56);
     406:	83 e0       	ldi	r24, 0x03	; 3
     408:	0e 94 37 0b 	call	0x166e	; 0x166e <analogReference>
  
  // set up the LCD's number of columns and rows:
  lcd.begin(16, 2);
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	42 e0       	ldi	r20, 0x02	; 2
     410:	60 e1       	ldi	r22, 0x10	; 16
     412:	81 ea       	ldi	r24, 0xA1	; 161
     414:	92 e0       	ldi	r25, 0x02	; 2
     416:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN13LiquidCrystal5beginEhhh>
  lcd.setCursor(0,0);
     41a:	40 e0       	ldi	r20, 0x00	; 0
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	81 ea       	ldi	r24, 0xA1	; 161
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZN13LiquidCrystal9setCursorEhh>
  lcd.print("Calibrating");
     426:	6e e0       	ldi	r22, 0x0E	; 14
     428:	72 e0       	ldi	r23, 0x02	; 2
     42a:	81 ea       	ldi	r24, 0xA1	; 161
     42c:	92 e0       	ldi	r25, 0x02	; 2
     42e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <_ZN5Print5printEPKc>
  
  RestoreBuffer((unsigned char*)&settings, sizeof(SETTINGS));
     432:	68 e0       	ldi	r22, 0x08	; 8
     434:	89 e9       	ldi	r24, 0x99	; 153
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	5b df       	rcall	.-330    	; 0x2f0 <_Z13RestoreBufferPhh>
  
  if (settings.avrVoltHi >= 0XAAAA)
     43a:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <settings>
     43e:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <settings+0x1>
     442:	8a 3a       	cpi	r24, 0xAA	; 170
     444:	9a 4a       	sbci	r25, 0xAA	; 170
     446:	d0 f0       	brcs	.+52     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
  {
	  settings.avrVoltHi = 128;
     448:	80 e8       	ldi	r24, 0x80	; 128
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <settings+0x1>
     450:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <settings>
	  settings.avrVoltLo = 121;
     454:	89 e7       	ldi	r24, 0x79	; 121
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <settings+0x3>
     45c:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <settings+0x2>
	  settings.rectVoltCalib = 682; // Multiply ADC Value with 100 and divide by this value
     460:	8a ea       	ldi	r24, 0xAA	; 170
     462:	92 e0       	ldi	r25, 0x02	; 2
     464:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <settings+0x5>
     468:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <settings+0x4>
	  settings.battVoltCalib = 682; // Multiply ADC Value with 100 and divide by this 
     46c:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <settings+0x7>
     470:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <settings+0x6>
	  StoreBuffer((unsigned char*)&settings, sizeof(SETTINGS));
     474:	68 e0       	ldi	r22, 0x08	; 8
     476:	89 e9       	ldi	r24, 0x99	; 153
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	34 cf       	rjmp	.-408    	; 0x2e4 <_Z11StoreBufferPhh>
     47c:	08 95       	ret

0000047e <_Z12readDebounceii>:
int debounce_hi_count = 0;
int debounce_low_count = 0;
int debounce_pin_no = 0;

int readDebounce(int pin_no, int deb_low_count)
{
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	18 2f       	mov	r17, r24
     486:	eb 01       	movw	r28, r22
	int pinstate = HIGH;
	
	pinstate = digitalRead(pin_no);
     488:	0e 94 1e 0c 	call	0x183c	; 0x183c <digitalRead>
	
	while(pinstate == LOW)
     48c:	89 2b       	or	r24, r25
     48e:	e1 f4       	brne	.+56     	; 0x4c8 <_Z12readDebounceii+0x4a>
	{
		delayMicroseconds(2);
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 ca 0a 	call	0x1594	; 0x1594 <delayMicroseconds>
		debounce_low_count++;
     498:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <debounce_low_count>
     49c:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <debounce_low_count+0x1>
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <debounce_low_count+0x1>
     4a6:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <debounce_low_count>
		pinstate = digitalRead(pin_no);
     4aa:	81 2f       	mov	r24, r17
     4ac:	0e 94 1e 0c 	call	0x183c	; 0x183c <digitalRead>
		if(debounce_low_count >= deb_low_count)
     4b0:	20 91 97 02 	lds	r18, 0x0297	; 0x800297 <debounce_low_count>
     4b4:	30 91 98 02 	lds	r19, 0x0298	; 0x800298 <debounce_low_count+0x1>
     4b8:	2c 17       	cp	r18, r28
     4ba:	3d 07       	cpc	r19, r29
     4bc:	3c f3       	brlt	.-50     	; 0x48c <_Z12readDebounceii+0xe>
		{
			debounce_low_count = deb_low_count;
     4be:	d0 93 98 02 	sts	0x0298, r29	; 0x800298 <debounce_low_count+0x1>
     4c2:	c0 93 97 02 	sts	0x0297, r28	; 0x800297 <debounce_low_count>
     4c6:	e2 cf       	rjmp	.-60     	; 0x48c <_Z12readDebounceii+0xe>
			//break;
		}
	}
	if(debounce_low_count >= deb_low_count)
     4c8:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <debounce_low_count>
     4cc:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <debounce_low_count+0x1>
	{
		debounce_low_count = 0;
     4d0:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <debounce_low_count+0x1>
     4d4:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <debounce_low_count>
		{
			debounce_low_count = deb_low_count;
			//break;
		}
	}
	if(debounce_low_count >= deb_low_count)
     4d8:	8c 17       	cp	r24, r28
     4da:	9d 07       	cpc	r25, r29
     4dc:	1c f0       	brlt	.+6      	; 0x4e4 <_Z12readDebounceii+0x66>
	{
		debounce_low_count = 0;
		return DEB_OK;
     4de:	87 e3       	ldi	r24, 0x37	; 55
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <_Z12readDebounceii+0x6a>
	}
	else
	{
		debounce_low_count = 0;
		return DEB_FAILED;
     4e4:	8e e2       	ldi	r24, 0x2E	; 46
     4e6:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	1f 91       	pop	r17
     4ee:	08 95       	ret

000004f0 <_Z13SetAndShowU16PjPc>:
char	chUival[8];
static uint8_t btnid=0;
static uint16_t PreValueU16 = 0;

uint16_t SetAndShowU16(uint16_t *iVal, char *chStr)
{
     4f0:	cf 92       	push	r12
     4f2:	df 92       	push	r13
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	ec 01       	movw	r28, r24
     502:	8b 01       	movw	r16, r22
	StrLen = strlen(chStr);
     504:	fb 01       	movw	r30, r22
     506:	01 90       	ld	r0, Z+
     508:	00 20       	and	r0, r0
     50a:	e9 f7       	brne	.-6      	; 0x506 <_Z13SetAndShowU16PjPc+0x16>
     50c:	31 97       	sbiw	r30, 0x01	; 1
     50e:	e6 1b       	sub	r30, r22
     510:	f7 0b       	sbc	r31, r23
     512:	e0 93 96 02 	sts	0x0296, r30	; 0x800296 <StrLen>
	
	lcd.clear();
     516:	81 ea       	ldi	r24, 0xA1	; 161
     518:	92 e0       	ldi	r25, 0x02	; 2
     51a:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN13LiquidCrystal5clearEv>
	
	while (1)
	{
		lcd.setCursor(0, 1);
		//GetNDigitFromShort(*iVal, chUival, 4);
		sprintf(chUival, "%04d", *iVal);
     51e:	8a e1       	ldi	r24, 0x1A	; 26
     520:	e8 2e       	mov	r14, r24
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	f8 2e       	mov	r15, r24
     526:	9e e8       	ldi	r25, 0x8E	; 142
     528:	c9 2e       	mov	r12, r25
     52a:	92 e0       	ldi	r25, 0x02	; 2
     52c:	d9 2e       	mov	r13, r25
	
	PreValueU16 = (*iVal);
	
	while (1)
	{
		lcd.setCursor(0, 1);
     52e:	41 e0       	ldi	r20, 0x01	; 1
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	81 ea       	ldi	r24, 0xA1	; 161
     534:	92 e0       	ldi	r25, 0x02	; 2
     536:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZN13LiquidCrystal9setCursorEhh>
		//GetNDigitFromShort(*iVal, chUival, 4);
		sprintf(chUival, "%04d", *iVal);
     53a:	89 81       	ldd	r24, Y+1	; 0x01
     53c:	8f 93       	push	r24
     53e:	88 81       	ld	r24, Y
     540:	8f 93       	push	r24
     542:	ff 92       	push	r15
     544:	ef 92       	push	r14
     546:	df 92       	push	r13
     548:	cf 92       	push	r12
     54a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <sprintf>
		//lcdPrintData(chStr, StrLen);
		lcd.print(chStr);
     54e:	b8 01       	movw	r22, r16
     550:	81 ea       	ldi	r24, 0xA1	; 161
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	d4 d7       	rcall	.+4008   	; 0x14fe <_ZN5Print5printEPKc>
		lcd.print(chUival);
     556:	6e e8       	ldi	r22, 0x8E	; 142
     558:	72 e0       	ldi	r23, 0x02	; 2
     55a:	81 ea       	ldi	r24, 0xA1	; 161
     55c:	92 e0       	ldi	r25, 0x02	; 2
     55e:	cf d7       	rcall	.+3998   	; 0x14fe <_ZN5Print5printEPKc>
		//lcdPrintData(chUival, 4);
		
		btnid = GetPressedButtonId();
     560:	0a d4       	rcall	.+2068   	; 0xd76 <_Z18GetPressedButtonIdv>
		if (btnid > 0)
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	88 23       	and	r24, r24
     570:	f1 f2       	breq	.-68     	; 0x52e <_Z13SetAndShowU16PjPc+0x3e>
		{
			if (btnid == 2)
     572:	82 30       	cpi	r24, 0x02	; 2
     574:	31 f4       	brne	.+12     	; 0x582 <_Z13SetAndShowU16PjPc+0x92>
			{
				if ((*iVal) < 32768)
     576:	88 81       	ld	r24, Y
     578:	99 81       	ldd	r25, Y+1	; 0x01
     57a:	97 fd       	sbrc	r25, 7
     57c:	0f c0       	rjmp	.+30     	; 0x59c <_Z13SetAndShowU16PjPc+0xac>
				{
					(*iVal)++;
     57e:	01 96       	adiw	r24, 0x01	; 1
     580:	08 c0       	rjmp	.+16     	; 0x592 <_Z13SetAndShowU16PjPc+0xa2>
				}
			}
			else if (btnid == 3)
     582:	83 30       	cpi	r24, 0x03	; 3
     584:	49 f4       	brne	.+18     	; 0x598 <_Z13SetAndShowU16PjPc+0xa8>
			{
				if (*iVal > 1)
     586:	88 81       	ld	r24, Y
     588:	99 81       	ldd	r25, Y+1	; 0x01
     58a:	82 30       	cpi	r24, 0x02	; 2
     58c:	91 05       	cpc	r25, r1
     58e:	30 f0       	brcs	.+12     	; 0x59c <_Z13SetAndShowU16PjPc+0xac>
				{
					(*iVal)--;
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	99 83       	std	Y+1, r25	; 0x01
     594:	88 83       	st	Y, r24
     596:	02 c0       	rjmp	.+4      	; 0x59c <_Z13SetAndShowU16PjPc+0xac>
				}
			}
			else if (btnid == 1)
     598:	81 30       	cpi	r24, 0x01	; 1
     59a:	51 f0       	breq	.+20     	; 0x5b0 <_Z13SetAndShowU16PjPc+0xc0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     59c:	2f ef       	ldi	r18, 0xFF	; 255
     59e:	83 ec       	ldi	r24, 0xC3	; 195
     5a0:	99 e0       	ldi	r25, 0x09	; 9
     5a2:	21 50       	subi	r18, 0x01	; 1
     5a4:	80 40       	sbci	r24, 0x00	; 0
     5a6:	90 40       	sbci	r25, 0x00	; 0
     5a8:	e1 f7       	brne	.-8      	; 0x5a2 <_Z13SetAndShowU16PjPc+0xb2>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <_Z13SetAndShowU16PjPc+0xbc>
     5ac:	00 00       	nop
     5ae:	bf cf       	rjmp	.-130    	; 0x52e <_Z13SetAndShowU16PjPc+0x3e>
			{
				//(*iVal) = PreValueU16;
				lcd.clear();
     5b0:	81 ea       	ldi	r24, 0xA1	; 161
     5b2:	92 e0       	ldi	r25, 0x02	; 2
     5b4:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN13LiquidCrystal5clearEv>
     5b8:	2f ef       	ldi	r18, 0xFF	; 255
     5ba:	83 ed       	ldi	r24, 0xD3	; 211
     5bc:	90 e3       	ldi	r25, 0x30	; 48
     5be:	21 50       	subi	r18, 0x01	; 1
     5c0:	80 40       	sbci	r24, 0x00	; 0
     5c2:	90 40       	sbci	r25, 0x00	; 0
     5c4:	e1 f7       	brne	.-8      	; 0x5be <_Z13SetAndShowU16PjPc+0xce>
     5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <_Z13SetAndShowU16PjPc+0xd8>
     5c8:	00 00       	nop
		
	}
	
	return 0;
	
}
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	df 90       	pop	r13
     5dc:	cf 90       	pop	r12
     5de:	08 95       	ret

000005e0 <loop>:
	  StoreBuffer((unsigned char*)&settings, sizeof(SETTINGS));
  }
}

void loop() 
{
     5e0:	4f 92       	push	r4
     5e2:	5f 92       	push	r5
     5e4:	6f 92       	push	r6
     5e6:	7f 92       	push	r7
     5e8:	8f 92       	push	r8
     5ea:	9f 92       	push	r9
     5ec:	af 92       	push	r10
     5ee:	bf 92       	push	r11
     5f0:	cf 92       	push	r12
     5f2:	df 92       	push	r13
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	00 d0       	rcall	.+0      	; 0x602 <loop+0x22>
     602:	1f 92       	push	r1
     604:	cd b7       	in	r28, 0x3d	; 61
     606:	de b7       	in	r29, 0x3e	; 62
	
	if(t1tick001 == true)
     608:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <t1tick001>
     60c:	88 23       	and	r24, r24
     60e:	09 f4       	brne	.+2      	; 0x612 <loop+0x32>
     610:	f0 c0       	rjmp	.+480    	; 0x7f2 <loop+0x212>
	{
		vBatt_adc = analogRead(vbatt_pin);
     612:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <vbatt_pin>
     616:	0e 94 3a 0b 	call	0x1674	; 0x1674 <analogRead>
     61a:	09 2e       	mov	r0, r25
     61c:	00 0c       	add	r0, r0
     61e:	aa 0b       	sbc	r26, r26
     620:	bb 0b       	sbc	r27, r27
     622:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <vBatt_adc>
     626:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <vBatt_adc+0x1>
     62a:	a0 93 18 03 	sts	0x0318, r26	; 0x800318 <vBatt_adc+0x2>
     62e:	b0 93 19 03 	sts	0x0319, r27	; 0x800319 <vBatt_adc+0x3>
		vRect_adc = analogRead(vrect_pin);
     632:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <vrect_pin>
     636:	0e 94 3a 0b 	call	0x1674	; 0x1674 <analogRead>
     63a:	09 2e       	mov	r0, r25
     63c:	00 0c       	add	r0, r0
     63e:	aa 0b       	sbc	r26, r26
     640:	bb 0b       	sbc	r27, r27
     642:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <vRect_adc>
     646:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <vRect_adc+0x1>
     64a:	a0 93 14 03 	sts	0x0314, r26	; 0x800314 <vRect_adc+0x2>
     64e:	b0 93 15 03 	sts	0x0315, r27	; 0x800315 <vRect_adc+0x3>
		vEarth_adc = analogRead(vearth_pin);
     652:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <vearth_pin>
     656:	0e 94 3a 0b 	call	0x1674	; 0x1674 <analogRead>
     65a:	9c 01       	movw	r18, r24
     65c:	99 0f       	add	r25, r25
     65e:	44 0b       	sbc	r20, r20
     660:	55 0b       	sbc	r21, r21
     662:	29 83       	std	Y+1, r18	; 0x01
     664:	3a 83       	std	Y+2, r19	; 0x02
     666:	4b 83       	std	Y+3, r20	; 0x03
     668:	5c 83       	std	Y+4, r21	; 0x04
     66a:	20 93 0e 03 	sts	0x030E, r18	; 0x80030e <vEarth_adc>
     66e:	30 93 0f 03 	sts	0x030F, r19	; 0x80030f <vEarth_adc+0x1>
     672:	40 93 10 03 	sts	0x0310, r20	; 0x800310 <vEarth_adc+0x2>
     676:	50 93 11 03 	sts	0x0311, r21	; 0x800311 <vEarth_adc+0x3>
		
		if (adc_collection_counter < 10)
     67a:	40 90 f2 02 	lds	r4, 0x02F2	; 0x8002f2 <adc_collection_counter>
     67e:	50 90 f3 02 	lds	r5, 0x02F3	; 0x8002f3 <adc_collection_counter+0x1>
     682:	60 90 f4 02 	lds	r6, 0x02F4	; 0x8002f4 <adc_collection_counter+0x2>
     686:	70 90 f5 02 	lds	r7, 0x02F5	; 0x8002f5 <adc_collection_counter+0x3>
     68a:	60 91 ee 02 	lds	r22, 0x02EE	; 0x8002ee <vbat_adc_accumulator>
     68e:	70 91 ef 02 	lds	r23, 0x02EF	; 0x8002ef <vbat_adc_accumulator+0x1>
     692:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <vbat_adc_accumulator+0x2>
     696:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <vbat_adc_accumulator+0x3>
     69a:	80 90 ea 02 	lds	r8, 0x02EA	; 0x8002ea <vrect_adc_accumulator>
     69e:	90 90 eb 02 	lds	r9, 0x02EB	; 0x8002eb <vrect_adc_accumulator+0x1>
     6a2:	a0 90 ec 02 	lds	r10, 0x02EC	; 0x8002ec <vrect_adc_accumulator+0x2>
     6a6:	b0 90 ed 02 	lds	r11, 0x02ED	; 0x8002ed <vrect_adc_accumulator+0x3>
     6aa:	c0 90 e6 02 	lds	r12, 0x02E6	; 0x8002e6 <vearth_adc_accumulator>
     6ae:	d0 90 e7 02 	lds	r13, 0x02E7	; 0x8002e7 <vearth_adc_accumulator+0x1>
     6b2:	e0 90 e8 02 	lds	r14, 0x02E8	; 0x8002e8 <vearth_adc_accumulator+0x2>
     6b6:	f0 90 e9 02 	lds	r15, 0x02E9	; 0x8002e9 <vearth_adc_accumulator+0x3>
     6ba:	3a e0       	ldi	r19, 0x0A	; 10
     6bc:	43 16       	cp	r4, r19
     6be:	51 04       	cpc	r5, r1
     6c0:	61 04       	cpc	r6, r1
     6c2:	71 04       	cpc	r7, r1
     6c4:	08 f0       	brcs	.+2      	; 0x6c8 <loop+0xe8>
     6c6:	46 c0       	rjmp	.+140    	; 0x754 <loop+0x174>
		{
			vbat_adc_accumulator += vBatt_adc;
     6c8:	00 91 16 03 	lds	r16, 0x0316	; 0x800316 <vBatt_adc>
     6cc:	10 91 17 03 	lds	r17, 0x0317	; 0x800317 <vBatt_adc+0x1>
     6d0:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <vBatt_adc+0x2>
     6d4:	30 91 19 03 	lds	r19, 0x0319	; 0x800319 <vBatt_adc+0x3>
     6d8:	06 0f       	add	r16, r22
     6da:	17 1f       	adc	r17, r23
     6dc:	28 1f       	adc	r18, r24
     6de:	39 1f       	adc	r19, r25
     6e0:	00 93 ee 02 	sts	0x02EE, r16	; 0x8002ee <vbat_adc_accumulator>
     6e4:	10 93 ef 02 	sts	0x02EF, r17	; 0x8002ef <vbat_adc_accumulator+0x1>
     6e8:	20 93 f0 02 	sts	0x02F0, r18	; 0x8002f0 <vbat_adc_accumulator+0x2>
     6ec:	30 93 f1 02 	sts	0x02F1, r19	; 0x8002f1 <vbat_adc_accumulator+0x3>
			vrect_adc_accumulator += vRect_adc;
     6f0:	00 91 12 03 	lds	r16, 0x0312	; 0x800312 <vRect_adc>
     6f4:	10 91 13 03 	lds	r17, 0x0313	; 0x800313 <vRect_adc+0x1>
     6f8:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <vRect_adc+0x2>
     6fc:	30 91 15 03 	lds	r19, 0x0315	; 0x800315 <vRect_adc+0x3>
     700:	80 0e       	add	r8, r16
     702:	91 1e       	adc	r9, r17
     704:	a2 1e       	adc	r10, r18
     706:	b3 1e       	adc	r11, r19
     708:	80 92 ea 02 	sts	0x02EA, r8	; 0x8002ea <vrect_adc_accumulator>
     70c:	90 92 eb 02 	sts	0x02EB, r9	; 0x8002eb <vrect_adc_accumulator+0x1>
     710:	a0 92 ec 02 	sts	0x02EC, r10	; 0x8002ec <vrect_adc_accumulator+0x2>
     714:	b0 92 ed 02 	sts	0x02ED, r11	; 0x8002ed <vrect_adc_accumulator+0x3>
			vearth_adc_accumulator += vEarth_adc;
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	9a 81       	ldd	r25, Y+2	; 0x02
     71c:	ab 81       	ldd	r26, Y+3	; 0x03
     71e:	bc 81       	ldd	r27, Y+4	; 0x04
     720:	8c 0d       	add	r24, r12
     722:	9d 1d       	adc	r25, r13
     724:	ae 1d       	adc	r26, r14
     726:	bf 1d       	adc	r27, r15
     728:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <vearth_adc_accumulator>
     72c:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <vearth_adc_accumulator+0x1>
     730:	a0 93 e8 02 	sts	0x02E8, r26	; 0x8002e8 <vearth_adc_accumulator+0x2>
     734:	b0 93 e9 02 	sts	0x02E9, r27	; 0x8002e9 <vearth_adc_accumulator+0x3>
			adc_collection_counter++;
     738:	d3 01       	movw	r26, r6
     73a:	c2 01       	movw	r24, r4
     73c:	01 96       	adiw	r24, 0x01	; 1
     73e:	a1 1d       	adc	r26, r1
     740:	b1 1d       	adc	r27, r1
     742:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <adc_collection_counter>
     746:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <adc_collection_counter+0x1>
     74a:	a0 93 f4 02 	sts	0x02F4, r26	; 0x8002f4 <adc_collection_counter+0x2>
     74e:	b0 93 f5 02 	sts	0x02F5, r27	; 0x8002f5 <adc_collection_counter+0x3>
     752:	4d c0       	rjmp	.+154    	; 0x7ee <loop+0x20e>
		}
		else
		{
			Batt_adc = vbat_adc_accumulator / 10;
     754:	2a e0       	ldi	r18, 0x0A	; 10
     756:	42 2e       	mov	r4, r18
     758:	51 2c       	mov	r5, r1
     75a:	61 2c       	mov	r6, r1
     75c:	71 2c       	mov	r7, r1
     75e:	a3 01       	movw	r20, r6
     760:	92 01       	movw	r18, r4
     762:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__udivmodsi4>
     766:	20 93 0a 03 	sts	0x030A, r18	; 0x80030a <Batt_adc>
     76a:	30 93 0b 03 	sts	0x030B, r19	; 0x80030b <Batt_adc+0x1>
     76e:	40 93 0c 03 	sts	0x030C, r20	; 0x80030c <Batt_adc+0x2>
     772:	50 93 0d 03 	sts	0x030D, r21	; 0x80030d <Batt_adc+0x3>
			Rect_adc = vrect_adc_accumulator / 10;
     776:	c5 01       	movw	r24, r10
     778:	b4 01       	movw	r22, r8
     77a:	a3 01       	movw	r20, r6
     77c:	92 01       	movw	r18, r4
     77e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__udivmodsi4>
     782:	20 93 06 03 	sts	0x0306, r18	; 0x800306 <Rect_adc>
     786:	30 93 07 03 	sts	0x0307, r19	; 0x800307 <Rect_adc+0x1>
     78a:	40 93 08 03 	sts	0x0308, r20	; 0x800308 <Rect_adc+0x2>
     78e:	50 93 09 03 	sts	0x0309, r21	; 0x800309 <Rect_adc+0x3>
			Earth_adc = vearth_adc_accumulator / 10;
     792:	c7 01       	movw	r24, r14
     794:	b6 01       	movw	r22, r12
     796:	a3 01       	movw	r20, r6
     798:	92 01       	movw	r18, r4
     79a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__udivmodsi4>
     79e:	20 93 02 03 	sts	0x0302, r18	; 0x800302 <Earth_adc>
     7a2:	30 93 03 03 	sts	0x0303, r19	; 0x800303 <Earth_adc+0x1>
     7a6:	40 93 04 03 	sts	0x0304, r20	; 0x800304 <Earth_adc+0x2>
     7aa:	50 93 05 03 	sts	0x0305, r21	; 0x800305 <Earth_adc+0x3>
			
			vbat_adc_accumulator = 0;
     7ae:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <vbat_adc_accumulator>
     7b2:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <vbat_adc_accumulator+0x1>
     7b6:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <vbat_adc_accumulator+0x2>
     7ba:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <vbat_adc_accumulator+0x3>
			vrect_adc_accumulator = 0;
     7be:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <vrect_adc_accumulator>
     7c2:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <vrect_adc_accumulator+0x1>
     7c6:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <vrect_adc_accumulator+0x2>
     7ca:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <vrect_adc_accumulator+0x3>
			vearth_adc_accumulator = 0;
     7ce:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <vearth_adc_accumulator>
     7d2:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <vearth_adc_accumulator+0x1>
     7d6:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <vearth_adc_accumulator+0x2>
     7da:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <vearth_adc_accumulator+0x3>
			adc_collection_counter = 0;
     7de:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <adc_collection_counter>
     7e2:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <adc_collection_counter+0x1>
     7e6:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <adc_collection_counter+0x2>
     7ea:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <adc_collection_counter+0x3>
		}
		
		
		t1tick001 = false;
     7ee:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <t1tick001>
	}
	  
  if (t1tick002)
     7f2:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <t1tick002>
     7f6:	88 23       	and	r24, r24
     7f8:	09 f4       	brne	.+2      	; 0x7fc <loop+0x21c>
     7fa:	f8 c0       	rjmp	.+496    	; 0x9ec <loop+0x40c>
  {  
	  vBattDisplay = ((Batt_adc * 100) / (uint32_t)(settings.battVoltCalib));
     7fc:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <Batt_adc>
     800:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <Batt_adc+0x1>
     804:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <Batt_adc+0x2>
     808:	50 91 0d 03 	lds	r21, 0x030D	; 0x80030d <Batt_adc+0x3>
     80c:	a4 e6       	ldi	r26, 0x64	; 100
     80e:	b0 e0       	ldi	r27, 0x00	; 0
     810:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__muluhisi3>
     814:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <settings+0x6>
     818:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <settings+0x7>
     81c:	40 e0       	ldi	r20, 0x00	; 0
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__udivmodsi4>
     824:	20 93 fe 02 	sts	0x02FE, r18	; 0x8002fe <vBattDisplay>
     828:	30 93 ff 02 	sts	0x02FF, r19	; 0x8002ff <vBattDisplay+0x1>
     82c:	40 93 00 03 	sts	0x0300, r20	; 0x800300 <vBattDisplay+0x2>
     830:	50 93 01 03 	sts	0x0301, r21	; 0x800301 <vBattDisplay+0x3>
	  vRectDisplay = ((Rect_adc * 100) / (uint32_t)(settings.rectVoltCalib));
     834:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <Rect_adc>
     838:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <Rect_adc+0x1>
     83c:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <Rect_adc+0x2>
     840:	50 91 09 03 	lds	r21, 0x0309	; 0x800309 <Rect_adc+0x3>
     844:	a4 e6       	ldi	r26, 0x64	; 100
     846:	b0 e0       	ldi	r27, 0x00	; 0
     848:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__muluhisi3>
     84c:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <settings+0x4>
     850:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <settings+0x5>
     854:	40 e0       	ldi	r20, 0x00	; 0
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__udivmodsi4>
     85c:	20 93 fa 02 	sts	0x02FA, r18	; 0x8002fa <vRectDisplay>
     860:	30 93 fb 02 	sts	0x02FB, r19	; 0x8002fb <vRectDisplay+0x1>
     864:	40 93 fc 02 	sts	0x02FC, r20	; 0x8002fc <vRectDisplay+0x2>
     868:	50 93 fd 02 	sts	0x02FD, r21	; 0x8002fd <vRectDisplay+0x3>
	  vEarthDisplay = ((Earth_adc * 100) / (uint32_t)100);
     86c:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <Earth_adc>
     870:	30 91 03 03 	lds	r19, 0x0303	; 0x800303 <Earth_adc+0x1>
     874:	40 91 04 03 	lds	r20, 0x0304	; 0x800304 <Earth_adc+0x2>
     878:	50 91 05 03 	lds	r21, 0x0305	; 0x800305 <Earth_adc+0x3>
     87c:	a4 e6       	ldi	r26, 0x64	; 100
     87e:	b0 e0       	ldi	r27, 0x00	; 0
     880:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__muluhisi3>
     884:	24 e6       	ldi	r18, 0x64	; 100
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	50 e0       	ldi	r21, 0x00	; 0
     88c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__udivmodsi4>
     890:	20 93 f6 02 	sts	0x02F6, r18	; 0x8002f6 <vEarthDisplay>
     894:	30 93 f7 02 	sts	0x02F7, r19	; 0x8002f7 <vEarthDisplay+0x1>
     898:	40 93 f8 02 	sts	0x02F8, r20	; 0x8002f8 <vEarthDisplay+0x2>
     89c:	50 93 f9 02 	sts	0x02F9, r21	; 0x8002f9 <vEarthDisplay+0x3>
	  //lcd.setCursor(0, 1);
	  // print the number of seconds since reset:
	  //lcd.print(millis() / 1000);
	  
	  
	  lcd.setCursor(0, 0);
     8a0:	40 e0       	ldi	r20, 0x00	; 0
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	81 ea       	ldi	r24, 0xA1	; 161
     8a6:	92 e0       	ldi	r25, 0x02	; 2
     8a8:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.print("B:");
     8ac:	62 e8       	ldi	r22, 0x82	; 130
     8ae:	72 e0       	ldi	r23, 0x02	; 2
     8b0:	81 ea       	ldi	r24, 0xA1	; 161
     8b2:	92 e0       	ldi	r25, 0x02	; 2
     8b4:	24 d6       	rcall	.+3144   	; 0x14fe <_ZN5Print5printEPKc>
	  sprintf(strText01, "%03d", vBattDisplay);
     8b6:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <vBattDisplay+0x3>
     8ba:	8f 93       	push	r24
     8bc:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <vBattDisplay+0x2>
     8c0:	8f 93       	push	r24
     8c2:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <vBattDisplay+0x1>
     8c6:	8f 93       	push	r24
     8c8:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <vBattDisplay>
     8cc:	8f 93       	push	r24
     8ce:	0f e1       	ldi	r16, 0x1F	; 31
     8d0:	12 e0       	ldi	r17, 0x02	; 2
     8d2:	1f 93       	push	r17
     8d4:	0f 93       	push	r16
     8d6:	49 eb       	ldi	r20, 0xB9	; 185
     8d8:	52 e0       	ldi	r21, 0x02	; 2
     8da:	5f 93       	push	r21
     8dc:	4f 93       	push	r20
     8de:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <sprintf>
	  lcd.print(strText01);
     8e2:	69 eb       	ldi	r22, 0xB9	; 185
     8e4:	72 e0       	ldi	r23, 0x02	; 2
     8e6:	81 ea       	ldi	r24, 0xA1	; 161
     8e8:	92 e0       	ldi	r25, 0x02	; 2
     8ea:	09 d6       	rcall	.+3090   	; 0x14fe <_ZN5Print5printEPKc>
	  //lcd.print(" ");
	  lcd.print("R:");
     8ec:	64 e2       	ldi	r22, 0x24	; 36
     8ee:	72 e0       	ldi	r23, 0x02	; 2
     8f0:	81 ea       	ldi	r24, 0xA1	; 161
     8f2:	92 e0       	ldi	r25, 0x02	; 2
     8f4:	04 d6       	rcall	.+3080   	; 0x14fe <_ZN5Print5printEPKc>
	  sprintf(strText01, "%03d", vRectDisplay);
     8f6:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <vRectDisplay+0x3>
     8fa:	8f 93       	push	r24
     8fc:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <vRectDisplay+0x2>
     900:	8f 93       	push	r24
     902:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <vRectDisplay+0x1>
     906:	8f 93       	push	r24
     908:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <vRectDisplay>
     90c:	8f 93       	push	r24
     90e:	1f 93       	push	r17
     910:	0f 93       	push	r16
     912:	a9 eb       	ldi	r26, 0xB9	; 185
     914:	b2 e0       	ldi	r27, 0x02	; 2
     916:	bf 93       	push	r27
     918:	af 93       	push	r26
     91a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <sprintf>
	  lcd.print(strText01);
     91e:	69 eb       	ldi	r22, 0xB9	; 185
     920:	72 e0       	ldi	r23, 0x02	; 2
     922:	81 ea       	ldi	r24, 0xA1	; 161
     924:	92 e0       	ldi	r25, 0x02	; 2
     926:	eb d5       	rcall	.+3030   	; 0x14fe <_ZN5Print5printEPKc>
	  
	  if (boost_on_flag)
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	de bf       	out	0x3e, r29	; 62
     92e:	0f be       	out	0x3f, r0	; 63
     930:	cd bf       	out	0x3d, r28	; 61
     932:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <boost_on_flag>
     936:	88 23       	and	r24, r24
     938:	19 f0       	breq	.+6      	; 0x940 <loop+0x360>
	  {
		  lcd.print(" BST");
     93a:	67 e2       	ldi	r22, 0x27	; 39
     93c:	72 e0       	ldi	r23, 0x02	; 2
     93e:	02 c0       	rjmp	.+4      	; 0x944 <loop+0x364>
	  }
	  else
	  {
		  lcd.print(" FLT");
     940:	6c e2       	ldi	r22, 0x2C	; 44
     942:	72 e0       	ldi	r23, 0x02	; 2
     944:	81 ea       	ldi	r24, 0xA1	; 161
     946:	92 e0       	ldi	r25, 0x02	; 2
     948:	da d5       	rcall	.+2996   	; 0x14fe <_ZN5Print5printEPKc>
	  }
	  
	  lcd.setCursor(0, 1);
     94a:	41 e0       	ldi	r20, 0x01	; 1
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	81 ea       	ldi	r24, 0xA1	; 161
     950:	92 e0       	ldi	r25, 0x02	; 2
     952:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.print("E:");
     956:	61 e3       	ldi	r22, 0x31	; 49
     958:	72 e0       	ldi	r23, 0x02	; 2
     95a:	81 ea       	ldi	r24, 0xA1	; 161
     95c:	92 e0       	ldi	r25, 0x02	; 2
     95e:	cf d5       	rcall	.+2974   	; 0x14fe <_ZN5Print5printEPKc>
	  sprintf(strText01, "%03d", vEarthDisplay);
     960:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <vEarthDisplay+0x3>
     964:	8f 93       	push	r24
     966:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <vEarthDisplay+0x2>
     96a:	8f 93       	push	r24
     96c:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <vEarthDisplay+0x1>
     970:	8f 93       	push	r24
     972:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <vEarthDisplay>
     976:	8f 93       	push	r24
     978:	8f e1       	ldi	r24, 0x1F	; 31
     97a:	92 e0       	ldi	r25, 0x02	; 2
     97c:	9f 93       	push	r25
     97e:	8f 93       	push	r24
     980:	89 eb       	ldi	r24, 0xB9	; 185
     982:	92 e0       	ldi	r25, 0x02	; 2
     984:	9f 93       	push	r25
     986:	8f 93       	push	r24
     988:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <sprintf>
	  lcd.print(strText01);
     98c:	69 eb       	ldi	r22, 0xB9	; 185
     98e:	72 e0       	ldi	r23, 0x02	; 2
     990:	81 ea       	ldi	r24, 0xA1	; 161
     992:	92 e0       	ldi	r25, 0x02	; 2
     994:	b4 d5       	rcall	.+2920   	; 0x14fe <_ZN5Print5printEPKc>
	  
	  if (mains_fail_status)
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <mains_fail_status>
     9a4:	88 23       	and	r24, r24
     9a6:	19 f0       	breq	.+6      	; 0x9ae <loop+0x3ce>
	  {
		  lcd.print("MAINS FAIL");
     9a8:	64 e3       	ldi	r22, 0x34	; 52
     9aa:	72 e0       	ldi	r23, 0x02	; 2
     9ac:	1a c0       	rjmp	.+52     	; 0x9e2 <loop+0x402>
	  }
	  else
	  {
		  switch (rect_voltage_state)
     9ae:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     9b2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     9b6:	86 31       	cpi	r24, 0x16	; 22
     9b8:	91 05       	cpc	r25, r1
     9ba:	71 f0       	breq	.+28     	; 0x9d8 <loop+0x3f8>
     9bc:	2c f4       	brge	.+10     	; 0x9c8 <loop+0x3e8>
     9be:	45 97       	sbiw	r24, 0x15	; 21
     9c0:	99 f4       	brne	.+38     	; 0x9e8 <loop+0x408>
		  {
			  case RECT_LOW_VOLTAGE:
			  lcd.print(" R1R2  LV");
     9c2:	6f e3       	ldi	r22, 0x3F	; 63
     9c4:	72 e0       	ldi	r23, 0x02	; 2
     9c6:	0d c0       	rjmp	.+26     	; 0x9e2 <loop+0x402>
	  {
		  lcd.print("MAINS FAIL");
	  }
	  else
	  {
		  switch (rect_voltage_state)
     9c8:	87 31       	cpi	r24, 0x17	; 23
     9ca:	91 05       	cpc	r25, r1
     9cc:	41 f0       	breq	.+16     	; 0x9de <loop+0x3fe>
     9ce:	48 97       	sbiw	r24, 0x18	; 24
     9d0:	59 f4       	brne	.+22     	; 0x9e8 <loop+0x408>
			  break;
			  case RECT_OVER_V1:
			  lcd.print(" R1   UV2");
			  break;
			  case RECT_OVER_V2:
			  lcd.print("       OV");
     9d2:	6d e5       	ldi	r22, 0x5D	; 93
     9d4:	72 e0       	ldi	r23, 0x02	; 2
     9d6:	05 c0       	rjmp	.+10     	; 0x9e2 <loop+0x402>
		  {
			  case RECT_LOW_VOLTAGE:
			  lcd.print(" R1R2  LV");
			  break;
			  case RECT_UNDER_V1:
			  lcd.print(" R1R2 UV1");
     9d8:	69 e4       	ldi	r22, 0x49	; 73
     9da:	72 e0       	ldi	r23, 0x02	; 2
			  break;
			  case RECT_OVER_V1:
			  lcd.print(" R1   UV2");
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <loop+0x402>
     9de:	63 e5       	ldi	r22, 0x53	; 83
			  break;
			  case RECT_OVER_V2:
			  lcd.print("       OV");
     9e0:	72 e0       	ldi	r23, 0x02	; 2
     9e2:	81 ea       	ldi	r24, 0xA1	; 161
     9e4:	92 e0       	ldi	r25, 0x02	; 2
     9e6:	8b d5       	rcall	.+2838   	; 0x14fe <_ZN5Print5printEPKc>
			  break;
		  }
	  }
	  
	  t1tick002 = false;
     9e8:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <t1tick002>
  }
  
  if (t1tick003)
     9ec:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <t1tick003>
     9f0:	88 23       	and	r24, r24
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <loop+0x416>
     9f4:	3a c1       	rjmp	.+628    	; 0xc6a <loop+0x68a>
  {
	  
	  if (vRectDisplay <= 100)
     9f6:	40 91 fa 02 	lds	r20, 0x02FA	; 0x8002fa <vRectDisplay>
     9fa:	50 91 fb 02 	lds	r21, 0x02FB	; 0x8002fb <vRectDisplay+0x1>
     9fe:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <vRectDisplay+0x2>
     a02:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <vRectDisplay+0x3>
     a06:	45 36       	cpi	r20, 0x65	; 101
     a08:	51 05       	cpc	r21, r1
     a0a:	61 05       	cpc	r22, r1
     a0c:	71 05       	cpc	r23, r1
     a0e:	e0 f4       	brcc	.+56     	; 0xa48 <loop+0x468>
	  {
		   //rect_low_voltage_count = 0;
		   rect_under_v1_count = 0;
     a10:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <rect_under_v1_count+0x1>
     a14:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <rect_under_v1_count>
		   rect_over_v1_count = 0;
     a18:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <rect_over_v1_count+0x1>
     a1c:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <rect_over_v1_count>
		   rect_over_v2_count = 0;
     a20:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <rect_over_v2_count+0x1>
     a24:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <rect_over_v2_count>
		  
		  if (rect_low_voltage_count < 5)
     a28:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <rect_low_voltage_count>
     a2c:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <rect_low_voltage_count+0x1>
     a30:	85 30       	cpi	r24, 0x05	; 5
     a32:	91 05       	cpc	r25, r1
     a34:	30 f4       	brcc	.+12     	; 0xa42 <loop+0x462>
		  {
			  rect_low_voltage_count++;
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <rect_low_voltage_count+0x1>
     a3c:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <rect_low_voltage_count>
     a40:	68 c0       	rjmp	.+208    	; 0xb12 <loop+0x532>
		  }
		  else
		  {
			  rect_voltage_state = RECT_LOW_VOLTAGE;
     a42:	85 e1       	ldi	r24, 0x15	; 21
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	61 c0       	rjmp	.+194    	; 0xb0a <loop+0x52a>
		  }
	  }
	  else if (vRectDisplay < settings.avrVoltLo)
     a48:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <settings+0x2>
     a4c:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <settings+0x3>
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	48 17       	cp	r20, r24
     a56:	59 07       	cpc	r21, r25
     a58:	6a 07       	cpc	r22, r26
     a5a:	7b 07       	cpc	r23, r27
     a5c:	e0 f4       	brcc	.+56     	; 0xa96 <loop+0x4b6>
	  {
		  rect_low_voltage_count = 0;
     a5e:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <rect_low_voltage_count+0x1>
     a62:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <rect_low_voltage_count>
		  //rect_under_v1_count = 0;
		  rect_over_v1_count = 0;
     a66:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <rect_over_v1_count+0x1>
     a6a:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <rect_over_v1_count>
		  rect_over_v2_count = 0;
     a6e:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <rect_over_v2_count+0x1>
     a72:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <rect_over_v2_count>
		  
		  if (rect_under_v1_count < 4)
     a76:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <rect_under_v1_count>
     a7a:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <rect_under_v1_count+0x1>
     a7e:	84 30       	cpi	r24, 0x04	; 4
     a80:	91 05       	cpc	r25, r1
     a82:	30 f4       	brcc	.+12     	; 0xa90 <loop+0x4b0>
		  {
			  rect_under_v1_count++;
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <rect_under_v1_count+0x1>
     a8a:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <rect_under_v1_count>
     a8e:	41 c0       	rjmp	.+130    	; 0xb12 <loop+0x532>
		  }
		  else
		  {
			  rect_voltage_state = RECT_UNDER_V1;
     a90:	86 e1       	ldi	r24, 0x16	; 22
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	3a c0       	rjmp	.+116    	; 0xb0a <loop+0x52a>
		  }
	  }
	  else if (vRectDisplay < settings.avrVoltHi)
     a96:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <settings>
     a9a:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <settings+0x1>
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
	  {
		  rect_low_voltage_count = 0;
     aa2:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <rect_low_voltage_count+0x1>
     aa6:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <rect_low_voltage_count>
		  rect_under_v1_count = 0;
     aaa:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <rect_under_v1_count+0x1>
     aae:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <rect_under_v1_count>
		  else
		  {
			  rect_voltage_state = RECT_UNDER_V1;
		  }
	  }
	  else if (vRectDisplay < settings.avrVoltHi)
     ab2:	48 17       	cp	r20, r24
     ab4:	59 07       	cpc	r21, r25
     ab6:	6a 07       	cpc	r22, r26
     ab8:	7b 07       	cpc	r23, r27
     aba:	a0 f4       	brcc	.+40     	; 0xae4 <loop+0x504>
	  {
		  rect_low_voltage_count = 0;
		  rect_under_v1_count = 0;
		  //rect_over_v1_count = 0;
		  rect_over_v2_count = 0;
     abc:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <rect_over_v2_count+0x1>
     ac0:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <rect_over_v2_count>
		  
		  if (rect_over_v1_count < 4)
     ac4:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <rect_over_v1_count>
     ac8:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <rect_over_v1_count+0x1>
     acc:	84 30       	cpi	r24, 0x04	; 4
     ace:	91 05       	cpc	r25, r1
     ad0:	30 f4       	brcc	.+12     	; 0xade <loop+0x4fe>
		  {
			  rect_over_v1_count++;
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <rect_over_v1_count+0x1>
     ad8:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <rect_over_v1_count>
     adc:	1a c0       	rjmp	.+52     	; 0xb12 <loop+0x532>
		  } 
		  else
		  {
			  rect_voltage_state = RECT_OVER_V1;
     ade:	87 e1       	ldi	r24, 0x17	; 23
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	13 c0       	rjmp	.+38     	; 0xb0a <loop+0x52a>
	  }
	  else if (vRectDisplay >= settings.avrVoltHi)
	  {
		  rect_low_voltage_count = 0;
		  rect_under_v1_count = 0;
		  rect_over_v1_count = 0;
     ae4:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <rect_over_v1_count+0x1>
     ae8:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <rect_over_v1_count>
		  //rect_over_v2_count = 0;
		  if (rect_over_v2_count < 4)
     aec:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <rect_over_v2_count>
     af0:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <rect_over_v2_count+0x1>
     af4:	84 30       	cpi	r24, 0x04	; 4
     af6:	91 05       	cpc	r25, r1
     af8:	30 f4       	brcc	.+12     	; 0xb06 <loop+0x526>
		  {
			  rect_over_v2_count++;
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <rect_over_v2_count+0x1>
     b00:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <rect_over_v2_count>
     b04:	06 c0       	rjmp	.+12     	; 0xb12 <loop+0x532>
		  }
		  else
		  {
			  rect_voltage_state = RECT_OVER_V2;
     b06:	88 e1       	ldi	r24, 0x18	; 24
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
     b0e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		  }
	  }
	  
	  if(mains_fail_status == false)
     b12:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <mains_fail_status>
     b16:	81 11       	cpse	r24, r1
     b18:	3e c0       	rjmp	.+124    	; 0xb96 <loop+0x5b6>
	  {
		  switch (rect_voltage_state)
     b1a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     b1e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     b22:	86 31       	cpi	r24, 0x16	; 22
     b24:	91 05       	cpc	r25, r1
     b26:	89 f0       	breq	.+34     	; 0xb4a <loop+0x56a>
     b28:	1c f4       	brge	.+6      	; 0xb30 <loop+0x550>
     b2a:	45 97       	sbiw	r24, 0x15	; 21
     b2c:	71 f0       	breq	.+28     	; 0xb4a <loop+0x56a>
     b2e:	24 c0       	rjmp	.+72     	; 0xb78 <loop+0x598>
     b30:	87 31       	cpi	r24, 0x17	; 23
     b32:	91 05       	cpc	r25, r1
     b34:	a9 f0       	breq	.+42     	; 0xb60 <loop+0x580>
			   digitalWrite(13, HIGH); //LED1
			   digitalWrite(12, LOW); //LED2
		   
			  break;
			  case RECT_OVER_V2:
			  digitalWrite(2, LOW);
     b36:	48 97       	sbiw	r24, 0x18	; 24
     b38:	f9 f4       	brne	.+62     	; 0xb78 <loop+0x598>
     b3a:	60 e0       	ldi	r22, 0x00	; 0
			  digitalWrite(3, LOW);
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	50 d6       	rcall	.+3232   	; 0x17e0 <digitalWrite>
     b40:	60 e0       	ldi	r22, 0x00	; 0
		  
			   digitalWrite(13, LOW); //LED1
     b42:	83 e0       	ldi	r24, 0x03	; 3
		  
			  digitalWrite(13, HIGH); //LED1
			  digitalWrite(12, HIGH); //LED2
			  break;
			  case RECT_UNDER_V1:
			  digitalWrite(2, HIGH);
     b44:	4d d6       	rcall	.+3226   	; 0x17e0 <digitalWrite>
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	12 c0       	rjmp	.+36     	; 0xb6e <loop+0x58e>
			  digitalWrite(3, HIGH);
     b4a:	61 e0       	ldi	r22, 0x01	; 1
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	48 d6       	rcall	.+3216   	; 0x17e0 <digitalWrite>
		  
				digitalWrite(13, HIGH); //LED1
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	83 e0       	ldi	r24, 0x03	; 3
     b54:	45 d6       	rcall	.+3210   	; 0x17e0 <digitalWrite>
				digitalWrite(12, HIGH); //LED2
     b56:	61 e0       	ldi	r22, 0x01	; 1
			  break;
			  case RECT_OVER_V1:
			  digitalWrite(2, HIGH);
     b58:	8d e0       	ldi	r24, 0x0D	; 13
     b5a:	42 d6       	rcall	.+3204   	; 0x17e0 <digitalWrite>
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	0a c0       	rjmp	.+20     	; 0xb74 <loop+0x594>
			  digitalWrite(3, LOW);
     b60:	61 e0       	ldi	r22, 0x01	; 1
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	3d d6       	rcall	.+3194   	; 0x17e0 <digitalWrite>
		   
			   digitalWrite(13, HIGH); //LED1
     b66:	60 e0       	ldi	r22, 0x00	; 0
			  break;
			  case RECT_OVER_V2:
			  digitalWrite(2, LOW);
			  digitalWrite(3, LOW);
		  
			   digitalWrite(13, LOW); //LED1
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	3a d6       	rcall	.+3188   	; 0x17e0 <digitalWrite>
			   digitalWrite(12, LOW); //LED2
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	8d e0       	ldi	r24, 0x0D	; 13
     b70:	37 d6       	rcall	.+3182   	; 0x17e0 <digitalWrite>
     b72:	60 e0       	ldi	r22, 0x00	; 0
			  break;
		  }
		  
		  if (boost_on_flag)
     b74:	8c e0       	ldi	r24, 0x0C	; 12
     b76:	34 d6       	rcall	.+3176   	; 0x17e0 <digitalWrite>
     b78:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <boost_on_flag>
		  {
			  digitalWrite(4, HIGH);
     b7c:	88 23       	and	r24, r24
     b7e:	29 f0       	breq	.+10     	; 0xb8a <loop+0x5aa>
			  digitalWrite(11, HIGH);
     b80:	61 e0       	ldi	r22, 0x01	; 1
		  }
		  else
		  {
			  digitalWrite(4, LOW);
     b82:	84 e0       	ldi	r24, 0x04	; 4
     b84:	2d d6       	rcall	.+3162   	; 0x17e0 <digitalWrite>
     b86:	61 e0       	ldi	r22, 0x01	; 1
			  digitalWrite(11, LOW);
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <loop+0x5b2>
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	84 e0       	ldi	r24, 0x04	; 4
		  }
	  }
	  else
	  {
		  digitalWrite(2, LOW);
     b8e:	28 d6       	rcall	.+3152   	; 0x17e0 <digitalWrite>
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	8b e0       	ldi	r24, 0x0B	; 11
     b94:	0b c0       	rjmp	.+22     	; 0xbac <loop+0x5cc>
		  digitalWrite(3, LOW);
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	22 d6       	rcall	.+3140   	; 0x17e0 <digitalWrite>
     b9c:	60 e0       	ldi	r22, 0x00	; 0
		  
		  digitalWrite(13, LOW); //LED1
     b9e:	83 e0       	ldi	r24, 0x03	; 3
     ba0:	1f d6       	rcall	.+3134   	; 0x17e0 <digitalWrite>
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	8d e0       	ldi	r24, 0x0D	; 13
		  digitalWrite(12, LOW); //LED2
     ba6:	1c d6       	rcall	.+3128   	; 0x17e0 <digitalWrite>
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	19 d6       	rcall	.+3122   	; 0x17e0 <digitalWrite>
	  }
	  
	  if (digitalRead(A3) == HIGH)
     bae:	89 e3       	ldi	r24, 0x39	; 57
     bb0:	45 d6       	rcall	.+3210   	; 0x183c <digitalRead>
     bb2:	40 91 dc 02 	lds	r20, 0x02DC	; 0x8002dc <mains_fail_count>
     bb6:	50 91 dd 02 	lds	r21, 0x02DD	; 0x8002dd <mains_fail_count+0x1>
     bba:	60 91 de 02 	lds	r22, 0x02DE	; 0x8002de <mains_fail_count+0x2>
     bbe:	70 91 df 02 	lds	r23, 0x02DF	; 0x8002df <mains_fail_count+0x3>
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	71 f4       	brne	.+28     	; 0xbe2 <loop+0x602>
     bc6:	45 30       	cpi	r20, 0x05	; 5
	  {
		  if (mains_fail_count < 5)
     bc8:	51 05       	cpc	r21, r1
     bca:	61 05       	cpc	r22, r1
     bcc:	71 05       	cpc	r23, r1
     bce:	28 f4       	brcc	.+10     	; 0xbda <loop+0x5fa>
     bd0:	4f 5f       	subi	r20, 0xFF	; 255
		  {
			  mains_fail_count++;
     bd2:	5f 4f       	sbci	r21, 0xFF	; 255
     bd4:	6f 4f       	sbci	r22, 0xFF	; 255
     bd6:	7f 4f       	sbci	r23, 0xFF	; 255
     bd8:	0d c0       	rjmp	.+26     	; 0xbf4 <loop+0x614>
     bda:	81 e0       	ldi	r24, 0x01	; 1
		  }
		  else
		  {
			  mains_fail_status = true;
     bdc:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <mains_fail_status>
     be0:	14 c0       	rjmp	.+40     	; 0xc0a <loop+0x62a>
		  }
	  }
	  else
	  {
		  if (mains_fail_count > 0)
     be2:	41 15       	cp	r20, r1
     be4:	51 05       	cpc	r21, r1
     be6:	61 05       	cpc	r22, r1
     be8:	71 05       	cpc	r23, r1
     bea:	69 f0       	breq	.+26     	; 0xc06 <loop+0x626>
		  {
			  mains_fail_count--;
     bec:	41 50       	subi	r20, 0x01	; 1
     bee:	51 09       	sbc	r21, r1
     bf0:	61 09       	sbc	r22, r1
     bf2:	71 09       	sbc	r23, r1
     bf4:	40 93 dc 02 	sts	0x02DC, r20	; 0x8002dc <mains_fail_count>
     bf8:	50 93 dd 02 	sts	0x02DD, r21	; 0x8002dd <mains_fail_count+0x1>
     bfc:	60 93 de 02 	sts	0x02DE, r22	; 0x8002de <mains_fail_count+0x2>
     c00:	70 93 df 02 	sts	0x02DF, r23	; 0x8002df <mains_fail_count+0x3>
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <loop+0x62a>
		  }
		  else
		  {
			  mains_fail_status = false;
     c06:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <mains_fail_status>
		  }
	  }
	  
	  if (digitalRead(45) == LOW)
     c0a:	8d e2       	ldi	r24, 0x2D	; 45
     c0c:	17 d6       	rcall	.+3118   	; 0x183c <digitalRead>
     c0e:	40 91 e1 02 	lds	r20, 0x02E1	; 0x8002e1 <boost_on_counter>
     c12:	50 91 e2 02 	lds	r21, 0x02E2	; 0x8002e2 <boost_on_counter+0x1>
     c16:	60 91 e3 02 	lds	r22, 0x02E3	; 0x8002e3 <boost_on_counter+0x2>
     c1a:	70 91 e4 02 	lds	r23, 0x02E4	; 0x8002e4 <boost_on_counter+0x3>
     c1e:	89 2b       	or	r24, r25
     c20:	71 f4       	brne	.+28     	; 0xc3e <loop+0x65e>
     c22:	45 30       	cpi	r20, 0x05	; 5
	  {
		  if (boost_on_counter < 5)
     c24:	51 05       	cpc	r21, r1
     c26:	61 05       	cpc	r22, r1
     c28:	71 05       	cpc	r23, r1
     c2a:	28 f4       	brcc	.+10     	; 0xc36 <loop+0x656>
     c2c:	4f 5f       	subi	r20, 0xFF	; 255
		  {
			  boost_on_counter++;
     c2e:	5f 4f       	sbci	r21, 0xFF	; 255
     c30:	6f 4f       	sbci	r22, 0xFF	; 255
     c32:	7f 4f       	sbci	r23, 0xFF	; 255
     c34:	0d c0       	rjmp	.+26     	; 0xc50 <loop+0x670>
     c36:	81 e0       	ldi	r24, 0x01	; 1
		  }
		  else
		  {
			  boost_on_flag = true;
     c38:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <boost_on_flag>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <loop+0x686>
     c3e:	41 15       	cp	r20, r1
		  }
	  }
	  else
	  {
		  if (boost_on_counter > 0)
     c40:	51 05       	cpc	r21, r1
     c42:	61 05       	cpc	r22, r1
     c44:	71 05       	cpc	r23, r1
     c46:	69 f0       	breq	.+26     	; 0xc62 <loop+0x682>
		  {
			  boost_on_counter--;
     c48:	41 50       	subi	r20, 0x01	; 1
     c4a:	51 09       	sbc	r21, r1
     c4c:	61 09       	sbc	r22, r1
     c4e:	71 09       	sbc	r23, r1
     c50:	40 93 e1 02 	sts	0x02E1, r20	; 0x8002e1 <boost_on_counter>
     c54:	50 93 e2 02 	sts	0x02E2, r21	; 0x8002e2 <boost_on_counter+0x1>
     c58:	60 93 e3 02 	sts	0x02E3, r22	; 0x8002e3 <boost_on_counter+0x2>
     c5c:	70 93 e4 02 	sts	0x02E4, r23	; 0x8002e4 <boost_on_counter+0x3>
		  }
		  else
		  {
			  boost_on_flag = false;
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <loop+0x686>
     c62:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <boost_on_flag>
	  }
	  
	  t1tick003 = false;
  }
  
  if (readDebounce(SW_MENU, 40) == DEB_OK)
     c66:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <t1tick003>
     c6a:	68 e2       	ldi	r22, 0x28	; 40
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	8e e0       	ldi	r24, 0x0E	; 14
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	05 dc       	rcall	.-2038   	; 0x47e <_Z12readDebounceii>
     c74:	c7 97       	sbiw	r24, 0x37	; 55
  {
	  lcd.clear();
     c76:	09 f0       	breq	.+2      	; 0xc7a <loop+0x69a>
     c78:	57 c0       	rjmp	.+174    	; 0xd28 <loop+0x748>
     c7a:	81 ea       	ldi	r24, 0xA1	; 161
     c7c:	92 e0       	ldi	r25, 0x02	; 2
     c7e:	99 d6       	rcall	.+3378   	; 0x19b2 <_ZN13LiquidCrystal5clearEv>
     c80:	9f ef       	ldi	r25, 0xFF	; 255
     c82:	af e0       	ldi	r26, 0x0F	; 15
     c84:	b7 e2       	ldi	r27, 0x27	; 39
     c86:	91 50       	subi	r25, 0x01	; 1
     c88:	a0 40       	sbci	r26, 0x00	; 0
     c8a:	b0 40       	sbci	r27, 0x00	; 0
	  _delay_ms(800);
	  SetAndShowU16(&settings.avrVoltHi, "AVR HIGH:");
     c8c:	e1 f7       	brne	.-8      	; 0xc86 <loop+0x6a6>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <loop+0x6b0>
     c90:	00 00       	nop
     c92:	67 e6       	ldi	r22, 0x67	; 103
     c94:	72 e0       	ldi	r23, 0x02	; 2
     c96:	89 e9       	ldi	r24, 0x99	; 153
	  lcd.clear();
     c98:	92 e0       	ldi	r25, 0x02	; 2
     c9a:	2a dc       	rcall	.-1964   	; 0x4f0 <_Z13SetAndShowU16PjPc>
     c9c:	81 ea       	ldi	r24, 0xA1	; 161
     c9e:	92 e0       	ldi	r25, 0x02	; 2
     ca0:	88 d6       	rcall	.+3344   	; 0x19b2 <_ZN13LiquidCrystal5clearEv>
     ca2:	2f ef       	ldi	r18, 0xFF	; 255
     ca4:	3f e0       	ldi	r19, 0x0F	; 15
     ca6:	47 e2       	ldi	r20, 0x27	; 39
     ca8:	21 50       	subi	r18, 0x01	; 1
     caa:	30 40       	sbci	r19, 0x00	; 0
     cac:	40 40       	sbci	r20, 0x00	; 0
	  _delay_ms(800);
	  SetAndShowU16(&settings.avrVoltLo, "AVR LOW:");
     cae:	e1 f7       	brne	.-8      	; 0xca8 <loop+0x6c8>
     cb0:	00 c0       	rjmp	.+0      	; 0xcb2 <loop+0x6d2>
     cb2:	00 00       	nop
     cb4:	61 e7       	ldi	r22, 0x71	; 113
     cb6:	72 e0       	ldi	r23, 0x02	; 2
     cb8:	8b e9       	ldi	r24, 0x9B	; 155
	  lcd.clear();
     cba:	92 e0       	ldi	r25, 0x02	; 2
     cbc:	19 dc       	rcall	.-1998   	; 0x4f0 <_Z13SetAndShowU16PjPc>
     cbe:	81 ea       	ldi	r24, 0xA1	; 161
     cc0:	92 e0       	ldi	r25, 0x02	; 2
     cc2:	77 d6       	rcall	.+3310   	; 0x19b2 <_ZN13LiquidCrystal5clearEv>
     cc4:	5f ef       	ldi	r21, 0xFF	; 255
     cc6:	8f e0       	ldi	r24, 0x0F	; 15
     cc8:	97 e2       	ldi	r25, 0x27	; 39
     cca:	51 50       	subi	r21, 0x01	; 1
     ccc:	80 40       	sbci	r24, 0x00	; 0
     cce:	90 40       	sbci	r25, 0x00	; 0
     cd0:	e1 f7       	brne	.-8      	; 0xcca <loop+0x6ea>
     cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <loop+0x6f4>
	  _delay_ms(800);
	  SetAndShowU16(&settings.battVoltCalib, "BAT CALIB:");
     cd4:	00 00       	nop
     cd6:	6a e7       	ldi	r22, 0x7A	; 122
     cd8:	72 e0       	ldi	r23, 0x02	; 2
     cda:	8f e9       	ldi	r24, 0x9F	; 159
     cdc:	92 e0       	ldi	r25, 0x02	; 2
     cde:	08 dc       	rcall	.-2032   	; 0x4f0 <_Z13SetAndShowU16PjPc>
	  lcd.clear();
     ce0:	81 ea       	ldi	r24, 0xA1	; 161
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	66 d6       	rcall	.+3276   	; 0x19b2 <_ZN13LiquidCrystal5clearEv>
     ce6:	af ef       	ldi	r26, 0xFF	; 255
     ce8:	bf e0       	ldi	r27, 0x0F	; 15
     cea:	27 e2       	ldi	r18, 0x27	; 39
     cec:	a1 50       	subi	r26, 0x01	; 1
     cee:	b0 40       	sbci	r27, 0x00	; 0
     cf0:	20 40       	sbci	r18, 0x00	; 0
     cf2:	e1 f7       	brne	.-8      	; 0xcec <loop+0x70c>
     cf4:	00 c0       	rjmp	.+0      	; 0xcf6 <loop+0x716>
     cf6:	00 00       	nop
	  _delay_ms(800);
	  StoreBuffer((unsigned char*)&settings, sizeof(SETTINGS));
     cf8:	68 e0       	ldi	r22, 0x08	; 8
     cfa:	89 e9       	ldi	r24, 0x99	; 153
     cfc:	92 e0       	ldi	r25, 0x02	; 2
  }
  
}
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	ff 90       	pop	r15
     d10:	ef 90       	pop	r14
     d12:	df 90       	pop	r13
     d14:	cf 90       	pop	r12
     d16:	bf 90       	pop	r11
     d18:	af 90       	pop	r10
     d1a:	9f 90       	pop	r9
     d1c:	8f 90       	pop	r8
     d1e:	7f 90       	pop	r7
     d20:	6f 90       	pop	r6
     d22:	5f 90       	pop	r5
     d24:	4f 90       	pop	r4
	  lcd.clear();
	  _delay_ms(800);
	  SetAndShowU16(&settings.battVoltCalib, "BAT CALIB:");
	  lcd.clear();
	  _delay_ms(800);
	  StoreBuffer((unsigned char*)&settings, sizeof(SETTINGS));
     d26:	de ca       	rjmp	.-2628   	; 0x2e4 <_Z11StoreBufferPhh>
     d28:	0f 90       	pop	r0
  }
  
}
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	ff 90       	pop	r15
     d3a:	ef 90       	pop	r14
     d3c:	df 90       	pop	r13
     d3e:	cf 90       	pop	r12
     d40:	bf 90       	pop	r11
     d42:	af 90       	pop	r10
     d44:	9f 90       	pop	r9
     d46:	8f 90       	pop	r8
     d48:	7f 90       	pop	r7
     d4a:	6f 90       	pop	r6
     d4c:	5f 90       	pop	r5
     d4e:	4f 90       	pop	r4
     d50:	08 95       	ret

00000d52 <_GLOBAL__sub_I_vbatt_pin>:
     d52:	cf 92       	push	r12
		
	}
	
	return 0;
	
}
     d54:	ef 92       	push	r14
     d56:	0f 93       	push	r16
bool t1tick003 = false;

char strText01[20];
char strText02[20];

LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
     d58:	8e e1       	ldi	r24, 0x1E	; 30
     d5a:	c8 2e       	mov	r12, r24
     d5c:	9f e1       	ldi	r25, 0x1F	; 31
     d5e:	e9 2e       	mov	r14, r25
     d60:	00 e2       	ldi	r16, 0x20	; 32
     d62:	21 e2       	ldi	r18, 0x21	; 33
     d64:	42 e2       	ldi	r20, 0x22	; 34
     d66:	63 e2       	ldi	r22, 0x23	; 35
     d68:	81 ea       	ldi	r24, 0xA1	; 161
     d6a:	92 e0       	ldi	r25, 0x02	; 2
     d6c:	cd d6       	rcall	.+3482   	; 0x1b08 <_ZN13LiquidCrystalC1Ehhhhhh>
		
	}
	
	return 0;
	
}
     d6e:	0f 91       	pop	r16
     d70:	ef 90       	pop	r14
     d72:	cf 90       	pop	r12
     d74:	08 95       	ret

00000d76 <_Z18GetPressedButtonIdv>:
		ButtonIdReadFlag = 1;
		return PressedButtonId;
	}
	
	return 0;
}
     d76:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <PressedButtonId>
     d7a:	88 23       	and	r24, r24
     d7c:	29 f0       	breq	.+10     	; 0xd88 <_Z18GetPressedButtonIdv+0x12>
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <ButtonIdReadFlag>
     d84:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <PressedButtonId>
     d88:	08 95       	ret

00000d8a <_Z24ButtonMatrixPrimaryCyclev>:

void ButtonMatrixPrimaryCycle()
{
     d8a:	cf 93       	push	r28
	if(ActiveColumn == BTNMATRIX_COLUMN1)
     d8c:	c0 91 0c 02 	lds	r28, 0x020C	; 0x80020c <ActiveColumn>
     d90:	c1 30       	cpi	r28, 0x01	; 1
     d92:	09 f0       	breq	.+2      	; 0xd96 <_Z24ButtonMatrixPrimaryCyclev+0xc>
     d94:	ce c0       	rjmp	.+412    	; 0xf32 <_Z24ButtonMatrixPrimaryCyclev+0x1a8>
	{
		CHECKPIN1
     d96:	8e e0       	ldi	r24, 0x0E	; 14
     d98:	51 d5       	rcall	.+2722   	; 0x183c <digitalRead>
     d9a:	89 2b       	or	r24, r25
     d9c:	a1 f5       	brne	.+104    	; 0xe06 <_Z24ButtonMatrixPrimaryCyclev+0x7c>
		{
			click = 1;
     d9e:	c0 93 1d 03 	sts	0x031D, r28	; 0x80031d <click>
			if (Button != 1)
     da2:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <Button>
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	51 f0       	breq	.+20     	; 0xdbe <_Z24ButtonMatrixPrimaryCyclev+0x34>
			{
				BtnPressCount = 0;
     daa:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <BtnPressCount+0x1>
     dae:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <BtnPressCount>
				PressedButtonId = 0;
     db2:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <PressedButtonId>
				LongPress = 0;
     db6:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <LongPress>
				Button = 1;
     dba:	c0 93 1e 03 	sts	0x031E, r28	; 0x80031e <Button>
			}
			BtnPressCount++;
     dbe:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <BtnPressCount>
     dc2:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <BtnPressCount+0x1>
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <BtnPressCount+0x1>
     dcc:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     dd0:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <LONGPRESS_COUNT>
     dd4:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <LONGPRESS_COUNT+0x1>
     dd8:	28 17       	cp	r18, r24
     dda:	39 07       	cpc	r19, r25
     ddc:	50 f4       	brcc	.+20     	; 0xdf2 <_Z24ButtonMatrixPrimaryCyclev+0x68>
			{
				PressedButtonId = 1;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <PressedButtonId>
				BtnPressCount = LONGPRESS_COUNT + 2;
     de4:	2e 5f       	subi	r18, 0xFE	; 254
     de6:	3f 4f       	sbci	r19, 0xFF	; 255
     de8:	30 93 22 03 	sts	0x0322, r19	; 0x800322 <BtnPressCount+0x1>
     dec:	20 93 21 03 	sts	0x0321, r18	; 0x800321 <BtnPressCount>
     df0:	6b c2       	rjmp	.+1238   	; 0x12c8 <_Z24ButtonMatrixPrimaryCyclev+0x53e>
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     df2:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <SHORTPRESS_COUNT>
     df6:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <SHORTPRESS_COUNT+0x1>
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	08 f0       	brcs	.+2      	; 0xe02 <_Z24ButtonMatrixPrimaryCyclev+0x78>
     e00:	05 c3       	rjmp	.+1546   	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
			{
				PressedButtonId = 1;
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	01 c3       	rjmp	.+1538   	; 0x1408 <_Z24ButtonMatrixPrimaryCyclev+0x67e>
			}
		}
		else CHECKPIN2
     e06:	8f e0       	ldi	r24, 0x0F	; 15
     e08:	19 d5       	rcall	.+2610   	; 0x183c <digitalRead>
     e0a:	89 2b       	or	r24, r25
     e0c:	69 f5       	brne	.+90     	; 0xe68 <_Z24ButtonMatrixPrimaryCyclev+0xde>
		{
			click = 1;
     e0e:	c0 93 1d 03 	sts	0x031D, r28	; 0x80031d <click>
			if (Button != 2)
     e12:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <Button>
     e16:	82 30       	cpi	r24, 0x02	; 2
     e18:	59 f0       	breq	.+22     	; 0xe30 <_Z24ButtonMatrixPrimaryCyclev+0xa6>
			{
				BtnPressCount = 0;
     e1a:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <BtnPressCount+0x1>
     e1e:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <BtnPressCount>
				PressedButtonId = 0;
     e22:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <PressedButtonId>
				LongPress = 0;
     e26:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <LongPress>
				Button = 2;
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <Button>
			}
			BtnPressCount++;
     e30:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <BtnPressCount>
     e34:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <BtnPressCount+0x1>
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <BtnPressCount+0x1>
     e3e:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     e42:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <LONGPRESS_COUNT>
     e46:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <LONGPRESS_COUNT+0x1>
     e4a:	28 17       	cp	r18, r24
     e4c:	39 07       	cpc	r19, r25
     e4e:	10 f4       	brcc	.+4      	; 0xe54 <_Z24ButtonMatrixPrimaryCyclev+0xca>
			{
				PressedButtonId = 2;
     e50:	82 e0       	ldi	r24, 0x02	; 2
     e52:	31 c2       	rjmp	.+1122   	; 0x12b6 <_Z24ButtonMatrixPrimaryCyclev+0x52c>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     e54:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <SHORTPRESS_COUNT>
     e58:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <SHORTPRESS_COUNT+0x1>
     e5c:	28 17       	cp	r18, r24
     e5e:	39 07       	cpc	r19, r25
     e60:	08 f0       	brcs	.+2      	; 0xe64 <_Z24ButtonMatrixPrimaryCyclev+0xda>
     e62:	d4 c2       	rjmp	.+1448   	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
			{
				PressedButtonId = 2;
     e64:	82 e0       	ldi	r24, 0x02	; 2
			}
		}
		else CHECKPIN3
     e66:	d0 c2       	rjmp	.+1440   	; 0x1408 <_Z24ButtonMatrixPrimaryCyclev+0x67e>
     e68:	80 e1       	ldi	r24, 0x10	; 16
     e6a:	e8 d4       	rcall	.+2512   	; 0x183c <digitalRead>
     e6c:	89 2b       	or	r24, r25
     e6e:	69 f5       	brne	.+90     	; 0xeca <_Z24ButtonMatrixPrimaryCyclev+0x140>
		{
			click = 1;
     e70:	c0 93 1d 03 	sts	0x031D, r28	; 0x80031d <click>
			if (Button != 3)
     e74:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <Button>
     e78:	83 30       	cpi	r24, 0x03	; 3
     e7a:	59 f0       	breq	.+22     	; 0xe92 <_Z24ButtonMatrixPrimaryCyclev+0x108>
			{
				BtnPressCount = 0;
     e7c:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <BtnPressCount+0x1>
     e80:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <BtnPressCount>
				PressedButtonId = 0;
     e84:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <PressedButtonId>
				LongPress = 0;
     e88:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <LongPress>
				Button = 3;
     e8c:	83 e0       	ldi	r24, 0x03	; 3
     e8e:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <Button>
			}
			BtnPressCount++;
     e92:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <BtnPressCount>
     e96:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <BtnPressCount+0x1>
     e9a:	01 96       	adiw	r24, 0x01	; 1
     e9c:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <BtnPressCount+0x1>
     ea0:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     ea4:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <LONGPRESS_COUNT>
     ea8:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <LONGPRESS_COUNT+0x1>
     eac:	28 17       	cp	r18, r24
     eae:	39 07       	cpc	r19, r25
     eb0:	10 f4       	brcc	.+4      	; 0xeb6 <_Z24ButtonMatrixPrimaryCyclev+0x12c>
			{
				PressedButtonId = 3;
     eb2:	83 e0       	ldi	r24, 0x03	; 3
     eb4:	00 c2       	rjmp	.+1024   	; 0x12b6 <_Z24ButtonMatrixPrimaryCyclev+0x52c>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     eb6:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <SHORTPRESS_COUNT>
     eba:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <SHORTPRESS_COUNT+0x1>
     ebe:	28 17       	cp	r18, r24
     ec0:	39 07       	cpc	r19, r25
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <_Z24ButtonMatrixPrimaryCyclev+0x13c>
     ec4:	a3 c2       	rjmp	.+1350   	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
			{
				PressedButtonId = 3;
     ec6:	83 e0       	ldi	r24, 0x03	; 3
			}
		}
		else CHECKPIN4
     ec8:	9f c2       	rjmp	.+1342   	; 0x1408 <_Z24ButtonMatrixPrimaryCyclev+0x67e>
     eca:	81 e1       	ldi	r24, 0x11	; 17
     ecc:	b7 d4       	rcall	.+2414   	; 0x183c <digitalRead>
     ece:	89 2b       	or	r24, r25
     ed0:	69 f5       	brne	.+90     	; 0xf2c <_Z24ButtonMatrixPrimaryCyclev+0x1a2>
		{
			click = 1;
     ed2:	c0 93 1d 03 	sts	0x031D, r28	; 0x80031d <click>
			if (Button != 4)
     ed6:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <Button>
     eda:	84 30       	cpi	r24, 0x04	; 4
     edc:	59 f0       	breq	.+22     	; 0xef4 <_Z24ButtonMatrixPrimaryCyclev+0x16a>
			{
				BtnPressCount = 0;
     ede:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <BtnPressCount+0x1>
     ee2:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <BtnPressCount>
				PressedButtonId = 0;
     ee6:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <PressedButtonId>
				LongPress = 0;
     eea:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <LongPress>
				Button = 4;
     eee:	84 e0       	ldi	r24, 0x04	; 4
     ef0:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <Button>
			}
			BtnPressCount++;
     ef4:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <BtnPressCount>
     ef8:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <BtnPressCount+0x1>
     efc:	01 96       	adiw	r24, 0x01	; 1
     efe:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <BtnPressCount+0x1>
     f02:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     f06:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <LONGPRESS_COUNT>
     f0a:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <LONGPRESS_COUNT+0x1>
     f0e:	28 17       	cp	r18, r24
     f10:	39 07       	cpc	r19, r25
     f12:	10 f4       	brcc	.+4      	; 0xf18 <_Z24ButtonMatrixPrimaryCyclev+0x18e>
			{
				PressedButtonId = 4;
     f14:	84 e0       	ldi	r24, 0x04	; 4
     f16:	cf c1       	rjmp	.+926    	; 0x12b6 <_Z24ButtonMatrixPrimaryCyclev+0x52c>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     f18:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <SHORTPRESS_COUNT>
     f1c:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <SHORTPRESS_COUNT+0x1>
     f20:	28 17       	cp	r18, r24
     f22:	39 07       	cpc	r19, r25
     f24:	08 f0       	brcs	.+2      	; 0xf28 <_Z24ButtonMatrixPrimaryCyclev+0x19e>
     f26:	72 c2       	rjmp	.+1252   	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
			{
				PressedButtonId = 4;
     f28:	84 e0       	ldi	r24, 0x04	; 4
     f2a:	6e c2       	rjmp	.+1244   	; 0x1408 <_Z24ButtonMatrixPrimaryCyclev+0x67e>
			}
		}
		else
		{
			//<MOD>ACTIVE_COLUMN2;
			ActiveColumn = BTNMATRIX_COLUMN1; //<MOD>
     f2c:	c0 93 0c 02 	sts	0x020C, r28	; 0x80020c <ActiveColumn>
     f30:	6d c2       	rjmp	.+1242   	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
		}
	}
	else if(ActiveColumn == BTNMATRIX_COLUMN2)
     f32:	c2 30       	cpi	r28, 0x02	; 2
     f34:	09 f0       	breq	.+2      	; 0xf38 <_Z24ButtonMatrixPrimaryCyclev+0x1ae>
	{
		CHECKPIN1
     f36:	c9 c0       	rjmp	.+402    	; 0x10ca <_Z24ButtonMatrixPrimaryCyclev+0x340>
     f38:	8e e0       	ldi	r24, 0x0E	; 14
     f3a:	80 d4       	rcall	.+2304   	; 0x183c <digitalRead>
     f3c:	89 2b       	or	r24, r25
     f3e:	71 f5       	brne	.+92     	; 0xf9c <_Z24ButtonMatrixPrimaryCyclev+0x212>
		{
			click = 1;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <click>
			if (Button != 5)
     f46:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <Button>
     f4a:	85 30       	cpi	r24, 0x05	; 5
     f4c:	59 f0       	breq	.+22     	; 0xf64 <_Z24ButtonMatrixPrimaryCyclev+0x1da>
			{
				BtnPressCount = 0;
     f4e:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <BtnPressCount+0x1>
     f52:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <BtnPressCount>
				PressedButtonId = 0;
     f56:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <PressedButtonId>
				LongPress = 0;
     f5a:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <LongPress>
				Button = 5;
     f5e:	85 e0       	ldi	r24, 0x05	; 5
     f60:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <Button>
			}
			BtnPressCount++;
     f64:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <BtnPressCount>
     f68:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <BtnPressCount+0x1>
     f6c:	01 96       	adiw	r24, 0x01	; 1
     f6e:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <BtnPressCount+0x1>
     f72:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     f76:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <LONGPRESS_COUNT>
     f7a:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <LONGPRESS_COUNT+0x1>
     f7e:	28 17       	cp	r18, r24
     f80:	39 07       	cpc	r19, r25
     f82:	10 f4       	brcc	.+4      	; 0xf88 <_Z24ButtonMatrixPrimaryCyclev+0x1fe>
			{
				PressedButtonId = 5;
     f84:	85 e0       	ldi	r24, 0x05	; 5
     f86:	97 c1       	rjmp	.+814    	; 0x12b6 <_Z24ButtonMatrixPrimaryCyclev+0x52c>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     f88:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <SHORTPRESS_COUNT>
     f8c:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <SHORTPRESS_COUNT+0x1>
     f90:	28 17       	cp	r18, r24
     f92:	39 07       	cpc	r19, r25
     f94:	08 f0       	brcs	.+2      	; 0xf98 <_Z24ButtonMatrixPrimaryCyclev+0x20e>
			{
				PressedButtonId = 5;
     f96:	3a c2       	rjmp	.+1140   	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
     f98:	85 e0       	ldi	r24, 0x05	; 5
			}
		}
		else CHECKPIN2
     f9a:	36 c2       	rjmp	.+1132   	; 0x1408 <_Z24ButtonMatrixPrimaryCyclev+0x67e>
     f9c:	8f e0       	ldi	r24, 0x0F	; 15
     f9e:	4e d4       	rcall	.+2204   	; 0x183c <digitalRead>
     fa0:	89 2b       	or	r24, r25
     fa2:	71 f5       	brne	.+92     	; 0x1000 <_Z24ButtonMatrixPrimaryCyclev+0x276>
		{
			click = 1;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <click>
			if (Button != 6)
     faa:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <Button>
     fae:	86 30       	cpi	r24, 0x06	; 6
     fb0:	59 f0       	breq	.+22     	; 0xfc8 <_Z24ButtonMatrixPrimaryCyclev+0x23e>
			{
				BtnPressCount = 0;
     fb2:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <BtnPressCount+0x1>
     fb6:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <BtnPressCount>
				PressedButtonId = 0;
     fba:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <PressedButtonId>
				LongPress = 0;
     fbe:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <LongPress>
				Button = 6;
     fc2:	86 e0       	ldi	r24, 0x06	; 6
     fc4:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <Button>
			}
			BtnPressCount++;
     fc8:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <BtnPressCount>
     fcc:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <BtnPressCount+0x1>
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <BtnPressCount+0x1>
     fd6:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     fda:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <LONGPRESS_COUNT>
     fde:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <LONGPRESS_COUNT+0x1>
     fe2:	28 17       	cp	r18, r24
     fe4:	39 07       	cpc	r19, r25
     fe6:	10 f4       	brcc	.+4      	; 0xfec <_Z24ButtonMatrixPrimaryCyclev+0x262>
			{
				PressedButtonId = 6;
     fe8:	86 e0       	ldi	r24, 0x06	; 6
     fea:	65 c1       	rjmp	.+714    	; 0x12b6 <_Z24ButtonMatrixPrimaryCyclev+0x52c>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     fec:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <SHORTPRESS_COUNT>
     ff0:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <SHORTPRESS_COUNT+0x1>
     ff4:	28 17       	cp	r18, r24
     ff6:	39 07       	cpc	r19, r25
     ff8:	08 f0       	brcs	.+2      	; 0xffc <_Z24ButtonMatrixPrimaryCyclev+0x272>
			{
				PressedButtonId = 6;
     ffa:	08 c2       	rjmp	.+1040   	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
     ffc:	86 e0       	ldi	r24, 0x06	; 6
			}
		}
		else CHECKPIN3
     ffe:	04 c2       	rjmp	.+1032   	; 0x1408 <_Z24ButtonMatrixPrimaryCyclev+0x67e>
    1000:	80 e1       	ldi	r24, 0x10	; 16
    1002:	1c d4       	rcall	.+2104   	; 0x183c <digitalRead>
    1004:	89 2b       	or	r24, r25
    1006:	71 f5       	brne	.+92     	; 0x1064 <_Z24ButtonMatrixPrimaryCyclev+0x2da>
		{
			click = 1;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <click>
			if (Button != 7)
    100e:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <Button>
    1012:	87 30       	cpi	r24, 0x07	; 7
    1014:	59 f0       	breq	.+22     	; 0x102c <_Z24ButtonMatrixPrimaryCyclev+0x2a2>
			{
				BtnPressCount = 0;
    1016:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <BtnPressCount+0x1>
    101a:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <BtnPressCount>
				PressedButtonId = 0;
    101e:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <PressedButtonId>
				LongPress = 0;
    1022:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <LongPress>
				Button = 7;
    1026:	87 e0       	ldi	r24, 0x07	; 7
    1028:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <Button>
			}
			BtnPressCount++;
    102c:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <BtnPressCount>
    1030:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <BtnPressCount+0x1>
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <BtnPressCount+0x1>
    103a:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
    103e:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <LONGPRESS_COUNT>
    1042:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <LONGPRESS_COUNT+0x1>
    1046:	28 17       	cp	r18, r24
    1048:	39 07       	cpc	r19, r25
    104a:	10 f4       	brcc	.+4      	; 0x1050 <_Z24ButtonMatrixPrimaryCyclev+0x2c6>
			{
				PressedButtonId = 7;
    104c:	87 e0       	ldi	r24, 0x07	; 7
    104e:	33 c1       	rjmp	.+614    	; 0x12b6 <_Z24ButtonMatrixPrimaryCyclev+0x52c>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
    1050:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <SHORTPRESS_COUNT>
    1054:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <SHORTPRESS_COUNT+0x1>
    1058:	28 17       	cp	r18, r24
    105a:	39 07       	cpc	r19, r25
    105c:	08 f0       	brcs	.+2      	; 0x1060 <_Z24ButtonMatrixPrimaryCyclev+0x2d6>
			{
				PressedButtonId = 7;
    105e:	d6 c1       	rjmp	.+940    	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
    1060:	87 e0       	ldi	r24, 0x07	; 7
			}
		}
		else CHECKPIN4
    1062:	d2 c1       	rjmp	.+932    	; 0x1408 <_Z24ButtonMatrixPrimaryCyclev+0x67e>
    1064:	81 e1       	ldi	r24, 0x11	; 17
    1066:	ea d3       	rcall	.+2004   	; 0x183c <digitalRead>
    1068:	89 2b       	or	r24, r25
    106a:	09 f0       	breq	.+2      	; 0x106e <_Z24ButtonMatrixPrimaryCyclev+0x2e4>
    106c:	cf c1       	rjmp	.+926    	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
		{
			click = 1;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <click>
			if (Button != 8)
    1074:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <Button>
    1078:	88 30       	cpi	r24, 0x08	; 8
    107a:	59 f0       	breq	.+22     	; 0x1092 <_Z24ButtonMatrixPrimaryCyclev+0x308>
			{
				BtnPressCount = 0;
    107c:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <BtnPressCount+0x1>
    1080:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <BtnPressCount>
				PressedButtonId = 0;
    1084:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <PressedButtonId>
				LongPress = 0;
    1088:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <LongPress>
				Button = 8;
    108c:	88 e0       	ldi	r24, 0x08	; 8
    108e:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <Button>
			}
			BtnPressCount++;
    1092:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <BtnPressCount>
    1096:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <BtnPressCount+0x1>
    109a:	01 96       	adiw	r24, 0x01	; 1
    109c:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <BtnPressCount+0x1>
    10a0:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
    10a4:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <LONGPRESS_COUNT>
    10a8:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <LONGPRESS_COUNT+0x1>
    10ac:	28 17       	cp	r18, r24
    10ae:	39 07       	cpc	r19, r25
    10b0:	10 f4       	brcc	.+4      	; 0x10b6 <_Z24ButtonMatrixPrimaryCyclev+0x32c>
			{
				PressedButtonId = 8;
    10b2:	88 e0       	ldi	r24, 0x08	; 8
    10b4:	00 c1       	rjmp	.+512    	; 0x12b6 <_Z24ButtonMatrixPrimaryCyclev+0x52c>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
    10b6:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <SHORTPRESS_COUNT>
    10ba:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <SHORTPRESS_COUNT+0x1>
    10be:	28 17       	cp	r18, r24
    10c0:	39 07       	cpc	r19, r25
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <_Z24ButtonMatrixPrimaryCyclev+0x33c>
			{
				PressedButtonId = 8;
    10c4:	a3 c1       	rjmp	.+838    	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
    10c6:	88 e0       	ldi	r24, 0x08	; 8
		{
			//<MOD>ACTIVE_COLUMN3;
			//<MOD>ActiveColumn = BTNMATRIX_COLUMN3;
		}
	}
	else if(ActiveColumn == BTNMATRIX_COLUMN3)
    10c8:	9f c1       	rjmp	.+830    	; 0x1408 <_Z24ButtonMatrixPrimaryCyclev+0x67e>
    10ca:	c3 30       	cpi	r28, 0x03	; 3
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <_Z24ButtonMatrixPrimaryCyclev+0x346>
	{
		CHECKPIN1
    10ce:	c9 c0       	rjmp	.+402    	; 0x1262 <_Z24ButtonMatrixPrimaryCyclev+0x4d8>
    10d0:	8e e0       	ldi	r24, 0x0E	; 14
    10d2:	b4 d3       	rcall	.+1896   	; 0x183c <digitalRead>
    10d4:	89 2b       	or	r24, r25
    10d6:	71 f5       	brne	.+92     	; 0x1134 <_Z24ButtonMatrixPrimaryCyclev+0x3aa>
		{
			click = 1;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <click>
			if (Button != 9)
    10de:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <Button>
    10e2:	89 30       	cpi	r24, 0x09	; 9
    10e4:	59 f0       	breq	.+22     	; 0x10fc <_Z24ButtonMatrixPrimaryCyclev+0x372>
			{
				BtnPressCount = 0;
    10e6:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <BtnPressCount+0x1>
    10ea:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <BtnPressCount>
				PressedButtonId = 0;
    10ee:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <PressedButtonId>
				LongPress = 0;
    10f2:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <LongPress>
				Button = 9;
    10f6:	89 e0       	ldi	r24, 0x09	; 9
    10f8:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <Button>
			}
			BtnPressCount++;
    10fc:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <BtnPressCount>
    1100:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <BtnPressCount+0x1>
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <BtnPressCount+0x1>
    110a:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
    110e:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <LONGPRESS_COUNT>
    1112:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <LONGPRESS_COUNT+0x1>
    1116:	28 17       	cp	r18, r24
    1118:	39 07       	cpc	r19, r25
    111a:	10 f4       	brcc	.+4      	; 0x1120 <_Z24ButtonMatrixPrimaryCyclev+0x396>
			{
				PressedButtonId = 9;
    111c:	89 e0       	ldi	r24, 0x09	; 9
    111e:	cb c0       	rjmp	.+406    	; 0x12b6 <_Z24ButtonMatrixPrimaryCyclev+0x52c>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
    1120:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <SHORTPRESS_COUNT>
    1124:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <SHORTPRESS_COUNT+0x1>
    1128:	28 17       	cp	r18, r24
    112a:	39 07       	cpc	r19, r25
    112c:	08 f0       	brcs	.+2      	; 0x1130 <_Z24ButtonMatrixPrimaryCyclev+0x3a6>
			{
				PressedButtonId = 9;
    112e:	6e c1       	rjmp	.+732    	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
    1130:	89 e0       	ldi	r24, 0x09	; 9
			}
		}
		else CHECKPIN2
    1132:	6a c1       	rjmp	.+724    	; 0x1408 <_Z24ButtonMatrixPrimaryCyclev+0x67e>
    1134:	8f e0       	ldi	r24, 0x0F	; 15
    1136:	82 d3       	rcall	.+1796   	; 0x183c <digitalRead>
    1138:	89 2b       	or	r24, r25
    113a:	71 f5       	brne	.+92     	; 0x1198 <_Z24ButtonMatrixPrimaryCyclev+0x40e>
		{
			click = 1;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <click>
			if (Button != 10)
    1142:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <Button>
    1146:	8a 30       	cpi	r24, 0x0A	; 10
    1148:	59 f0       	breq	.+22     	; 0x1160 <_Z24ButtonMatrixPrimaryCyclev+0x3d6>
			{
				BtnPressCount = 0;
    114a:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <BtnPressCount+0x1>
    114e:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <BtnPressCount>
				PressedButtonId = 0;
    1152:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <PressedButtonId>
				LongPress = 0;
    1156:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <LongPress>
				Button = 10;
    115a:	8a e0       	ldi	r24, 0x0A	; 10
    115c:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <Button>
			}
			BtnPressCount++;
    1160:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <BtnPressCount>
    1164:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <BtnPressCount+0x1>
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <BtnPressCount+0x1>
    116e:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
    1172:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <LONGPRESS_COUNT>
    1176:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <LONGPRESS_COUNT+0x1>
    117a:	28 17       	cp	r18, r24
    117c:	39 07       	cpc	r19, r25
    117e:	10 f4       	brcc	.+4      	; 0x1184 <_Z24ButtonMatrixPrimaryCyclev+0x3fa>
			{
				PressedButtonId = 10;
    1180:	8a e0       	ldi	r24, 0x0A	; 10
    1182:	99 c0       	rjmp	.+306    	; 0x12b6 <_Z24ButtonMatrixPrimaryCyclev+0x52c>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
    1184:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <SHORTPRESS_COUNT>
    1188:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <SHORTPRESS_COUNT+0x1>
    118c:	28 17       	cp	r18, r24
    118e:	39 07       	cpc	r19, r25
    1190:	08 f0       	brcs	.+2      	; 0x1194 <_Z24ButtonMatrixPrimaryCyclev+0x40a>
			{
				PressedButtonId = 10;
    1192:	3c c1       	rjmp	.+632    	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
    1194:	8a e0       	ldi	r24, 0x0A	; 10
			}
		}
		else CHECKPIN3
    1196:	38 c1       	rjmp	.+624    	; 0x1408 <_Z24ButtonMatrixPrimaryCyclev+0x67e>
    1198:	80 e1       	ldi	r24, 0x10	; 16
    119a:	50 d3       	rcall	.+1696   	; 0x183c <digitalRead>
    119c:	89 2b       	or	r24, r25
    119e:	71 f5       	brne	.+92     	; 0x11fc <_Z24ButtonMatrixPrimaryCyclev+0x472>
		{
			click = 1;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <click>
			if (Button != 11)
    11a6:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <Button>
    11aa:	8b 30       	cpi	r24, 0x0B	; 11
    11ac:	59 f0       	breq	.+22     	; 0x11c4 <_Z24ButtonMatrixPrimaryCyclev+0x43a>
			{
				BtnPressCount = 0;
    11ae:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <BtnPressCount+0x1>
    11b2:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <BtnPressCount>
				PressedButtonId = 0;
    11b6:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <PressedButtonId>
				LongPress = 0;
    11ba:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <LongPress>
				Button = 11;
    11be:	8b e0       	ldi	r24, 0x0B	; 11
    11c0:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <Button>
			}
			BtnPressCount++;
    11c4:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <BtnPressCount>
    11c8:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <BtnPressCount+0x1>
    11cc:	01 96       	adiw	r24, 0x01	; 1
    11ce:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <BtnPressCount+0x1>
    11d2:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
    11d6:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <LONGPRESS_COUNT>
    11da:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <LONGPRESS_COUNT+0x1>
    11de:	28 17       	cp	r18, r24
    11e0:	39 07       	cpc	r19, r25
    11e2:	10 f4       	brcc	.+4      	; 0x11e8 <_Z24ButtonMatrixPrimaryCyclev+0x45e>
			{
				PressedButtonId = 11;
    11e4:	8b e0       	ldi	r24, 0x0B	; 11
    11e6:	67 c0       	rjmp	.+206    	; 0x12b6 <_Z24ButtonMatrixPrimaryCyclev+0x52c>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
    11e8:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <SHORTPRESS_COUNT>
    11ec:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <SHORTPRESS_COUNT+0x1>
    11f0:	28 17       	cp	r18, r24
    11f2:	39 07       	cpc	r19, r25
    11f4:	08 f0       	brcs	.+2      	; 0x11f8 <_Z24ButtonMatrixPrimaryCyclev+0x46e>
			{
				PressedButtonId = 11;
    11f6:	0a c1       	rjmp	.+532    	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
    11f8:	8b e0       	ldi	r24, 0x0B	; 11
			}
		}
		else CHECKPIN4
    11fa:	06 c1       	rjmp	.+524    	; 0x1408 <_Z24ButtonMatrixPrimaryCyclev+0x67e>
    11fc:	81 e1       	ldi	r24, 0x11	; 17
    11fe:	1e d3       	rcall	.+1596   	; 0x183c <digitalRead>
    1200:	89 2b       	or	r24, r25
    1202:	09 f0       	breq	.+2      	; 0x1206 <_Z24ButtonMatrixPrimaryCyclev+0x47c>
    1204:	03 c1       	rjmp	.+518    	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
		{
			click = 1;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <click>
			if (Button != 12)
    120c:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <Button>
    1210:	8c 30       	cpi	r24, 0x0C	; 12
    1212:	59 f0       	breq	.+22     	; 0x122a <_Z24ButtonMatrixPrimaryCyclev+0x4a0>
			{
				BtnPressCount = 0;
    1214:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <BtnPressCount+0x1>
    1218:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <BtnPressCount>
				PressedButtonId = 0;
    121c:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <PressedButtonId>
				LongPress = 0;
    1220:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <LongPress>
				Button = 12;
    1224:	8c e0       	ldi	r24, 0x0C	; 12
    1226:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <Button>
			}
			BtnPressCount++;
    122a:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <BtnPressCount>
    122e:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <BtnPressCount+0x1>
    1232:	01 96       	adiw	r24, 0x01	; 1
    1234:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <BtnPressCount+0x1>
    1238:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
    123c:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <LONGPRESS_COUNT>
    1240:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <LONGPRESS_COUNT+0x1>
    1244:	28 17       	cp	r18, r24
    1246:	39 07       	cpc	r19, r25
    1248:	10 f4       	brcc	.+4      	; 0x124e <_Z24ButtonMatrixPrimaryCyclev+0x4c4>
			{
				PressedButtonId = 12;
    124a:	8c e0       	ldi	r24, 0x0C	; 12
    124c:	34 c0       	rjmp	.+104    	; 0x12b6 <_Z24ButtonMatrixPrimaryCyclev+0x52c>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
    124e:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <SHORTPRESS_COUNT>
    1252:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <SHORTPRESS_COUNT+0x1>
    1256:	28 17       	cp	r18, r24
    1258:	39 07       	cpc	r19, r25
    125a:	08 f0       	brcs	.+2      	; 0x125e <_Z24ButtonMatrixPrimaryCyclev+0x4d4>
			{
				PressedButtonId = 12;
    125c:	d7 c0       	rjmp	.+430    	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
    125e:	8c e0       	ldi	r24, 0x0C	; 12
		{
			//<MOD>ACTIVE_COLUMN4;
			//<MOD>ActiveColumn = BTNMATRIX_COLUMN4;
		}
	}
	else if(ActiveColumn == BTNMATRIX_COLUMN4)
    1260:	d3 c0       	rjmp	.+422    	; 0x1408 <_Z24ButtonMatrixPrimaryCyclev+0x67e>
    1262:	c4 30       	cpi	r28, 0x04	; 4
    1264:	09 f0       	breq	.+2      	; 0x1268 <_Z24ButtonMatrixPrimaryCyclev+0x4de>
	{
		CHECKPIN1
    1266:	d2 c0       	rjmp	.+420    	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
    1268:	8e e0       	ldi	r24, 0x0E	; 14
    126a:	e8 d2       	rcall	.+1488   	; 0x183c <digitalRead>
    126c:	89 2b       	or	r24, r25
    126e:	c9 f5       	brne	.+114    	; 0x12e2 <_Z24ButtonMatrixPrimaryCyclev+0x558>
		{
			click = 1;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <click>
			if (Button != 13)
    1276:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <Button>
    127a:	8d 30       	cpi	r24, 0x0D	; 13
    127c:	59 f0       	breq	.+22     	; 0x1294 <_Z24ButtonMatrixPrimaryCyclev+0x50a>
			{
				BtnPressCount = 0;
    127e:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <BtnPressCount+0x1>
    1282:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <BtnPressCount>
				PressedButtonId = 0;
    1286:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <PressedButtonId>
				LongPress = 0;
    128a:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <LongPress>
				Button = 13;
    128e:	8d e0       	ldi	r24, 0x0D	; 13
    1290:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <Button>
			}
			BtnPressCount++;
    1294:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <BtnPressCount>
    1298:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <BtnPressCount+0x1>
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <BtnPressCount+0x1>
    12a2:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
    12a6:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <LONGPRESS_COUNT>
    12aa:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <LONGPRESS_COUNT+0x1>
    12ae:	28 17       	cp	r18, r24
    12b0:	39 07       	cpc	r19, r25
    12b2:	68 f4       	brcc	.+26     	; 0x12ce <_Z24ButtonMatrixPrimaryCyclev+0x544>
			{
				PressedButtonId = 13;
    12b4:	8d e0       	ldi	r24, 0x0D	; 13
    12b6:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <PressedButtonId>
				BtnPressCount = LONGPRESS_COUNT + 2;
    12ba:	2e 5f       	subi	r18, 0xFE	; 254
    12bc:	3f 4f       	sbci	r19, 0xFF	; 255
    12be:	30 93 22 03 	sts	0x0322, r19	; 0x800322 <BtnPressCount+0x1>
    12c2:	20 93 21 03 	sts	0x0321, r18	; 0x800321 <BtnPressCount>
				LongPress = 1;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <LongPress>
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
    12cc:	9f c0       	rjmp	.+318    	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
    12ce:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <SHORTPRESS_COUNT>
    12d2:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <SHORTPRESS_COUNT+0x1>
    12d6:	28 17       	cp	r18, r24
    12d8:	39 07       	cpc	r19, r25
    12da:	08 f0       	brcs	.+2      	; 0x12de <_Z24ButtonMatrixPrimaryCyclev+0x554>
			{
				PressedButtonId = 13;
    12dc:	97 c0       	rjmp	.+302    	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
    12de:	8d e0       	ldi	r24, 0x0D	; 13
			}
		}
		else CHECKPIN2
    12e0:	93 c0       	rjmp	.+294    	; 0x1408 <_Z24ButtonMatrixPrimaryCyclev+0x67e>
    12e2:	8f e0       	ldi	r24, 0x0F	; 15
    12e4:	ab d2       	rcall	.+1366   	; 0x183c <digitalRead>
    12e6:	89 2b       	or	r24, r25
    12e8:	71 f5       	brne	.+92     	; 0x1346 <_Z24ButtonMatrixPrimaryCyclev+0x5bc>
		{
			click = 1;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <click>
			if (Button != 14)
    12f0:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <Button>
    12f4:	8e 30       	cpi	r24, 0x0E	; 14
    12f6:	59 f0       	breq	.+22     	; 0x130e <_Z24ButtonMatrixPrimaryCyclev+0x584>
			{
				BtnPressCount = 0;
    12f8:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <BtnPressCount+0x1>
    12fc:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <BtnPressCount>
				PressedButtonId = 0;
    1300:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <PressedButtonId>
				LongPress = 0;
    1304:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <LongPress>
				Button = 14;
    1308:	8e e0       	ldi	r24, 0x0E	; 14
    130a:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <Button>
			}
			BtnPressCount++;
    130e:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <BtnPressCount>
    1312:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <BtnPressCount+0x1>
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <BtnPressCount+0x1>
    131c:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
    1320:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <LONGPRESS_COUNT>
    1324:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <LONGPRESS_COUNT+0x1>
    1328:	28 17       	cp	r18, r24
    132a:	39 07       	cpc	r19, r25
			{
				PressedButtonId = 14;
    132c:	10 f4       	brcc	.+4      	; 0x1332 <_Z24ButtonMatrixPrimaryCyclev+0x5a8>
    132e:	8e e0       	ldi	r24, 0x0E	; 14
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
    1330:	c2 cf       	rjmp	.-124    	; 0x12b6 <_Z24ButtonMatrixPrimaryCyclev+0x52c>
    1332:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <SHORTPRESS_COUNT>
    1336:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <SHORTPRESS_COUNT+0x1>
    133a:	28 17       	cp	r18, r24
    133c:	39 07       	cpc	r19, r25
    133e:	08 f0       	brcs	.+2      	; 0x1342 <_Z24ButtonMatrixPrimaryCyclev+0x5b8>
			{
				PressedButtonId = 14;
    1340:	65 c0       	rjmp	.+202    	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
    1342:	8e e0       	ldi	r24, 0x0E	; 14
			}
		}
		else CHECKPIN3
    1344:	61 c0       	rjmp	.+194    	; 0x1408 <_Z24ButtonMatrixPrimaryCyclev+0x67e>
    1346:	80 e1       	ldi	r24, 0x10	; 16
    1348:	79 d2       	rcall	.+1266   	; 0x183c <digitalRead>
    134a:	89 2b       	or	r24, r25
    134c:	69 f5       	brne	.+90     	; 0x13a8 <_Z24ButtonMatrixPrimaryCyclev+0x61e>
		{
			click = 1;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <click>
			if (Button != 15)
    1354:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <Button>
    1358:	8f 30       	cpi	r24, 0x0F	; 15
    135a:	59 f0       	breq	.+22     	; 0x1372 <_Z24ButtonMatrixPrimaryCyclev+0x5e8>
			{
				BtnPressCount = 0;
    135c:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <BtnPressCount+0x1>
    1360:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <BtnPressCount>
				PressedButtonId = 0;
    1364:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <PressedButtonId>
				LongPress = 0;
    1368:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <LongPress>
				Button = 15;
    136c:	8f e0       	ldi	r24, 0x0F	; 15
    136e:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <Button>
			}
			BtnPressCount++;
    1372:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <BtnPressCount>
    1376:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <BtnPressCount+0x1>
    137a:	01 96       	adiw	r24, 0x01	; 1
    137c:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <BtnPressCount+0x1>
    1380:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
    1384:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <LONGPRESS_COUNT>
    1388:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <LONGPRESS_COUNT+0x1>
    138c:	28 17       	cp	r18, r24
    138e:	39 07       	cpc	r19, r25
			{
				PressedButtonId = 15;
    1390:	10 f4       	brcc	.+4      	; 0x1396 <_Z24ButtonMatrixPrimaryCyclev+0x60c>
    1392:	8f e0       	ldi	r24, 0x0F	; 15
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
    1394:	90 cf       	rjmp	.-224    	; 0x12b6 <_Z24ButtonMatrixPrimaryCyclev+0x52c>
    1396:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <SHORTPRESS_COUNT>
    139a:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <SHORTPRESS_COUNT+0x1>
    139e:	28 17       	cp	r18, r24
    13a0:	39 07       	cpc	r19, r25
			{
				PressedButtonId = 15;
    13a2:	a0 f5       	brcc	.+104    	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
    13a4:	8f e0       	ldi	r24, 0x0F	; 15
			}
		}
		else CHECKPIN4
    13a6:	30 c0       	rjmp	.+96     	; 0x1408 <_Z24ButtonMatrixPrimaryCyclev+0x67e>
    13a8:	81 e1       	ldi	r24, 0x11	; 17
    13aa:	48 d2       	rcall	.+1168   	; 0x183c <digitalRead>
    13ac:	89 2b       	or	r24, r25
    13ae:	71 f5       	brne	.+92     	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
		{
			click = 1;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <click>
			if (Button != 16)
    13b6:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <Button>
    13ba:	80 31       	cpi	r24, 0x10	; 16
    13bc:	59 f0       	breq	.+22     	; 0x13d4 <_Z24ButtonMatrixPrimaryCyclev+0x64a>
			{
				BtnPressCount = 0;
    13be:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <BtnPressCount+0x1>
    13c2:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <BtnPressCount>
				PressedButtonId = 0;
    13c6:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <PressedButtonId>
				LongPress = 0;
    13ca:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <LongPress>
				Button = 16;
    13ce:	80 e1       	ldi	r24, 0x10	; 16
    13d0:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <Button>
			}
			BtnPressCount++;
    13d4:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <BtnPressCount>
    13d8:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <BtnPressCount+0x1>
    13dc:	01 96       	adiw	r24, 0x01	; 1
    13de:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <BtnPressCount+0x1>
    13e2:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
    13e6:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <LONGPRESS_COUNT>
    13ea:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <LONGPRESS_COUNT+0x1>
    13ee:	28 17       	cp	r18, r24
    13f0:	39 07       	cpc	r19, r25
    13f2:	10 f4       	brcc	.+4      	; 0x13f8 <_Z24ButtonMatrixPrimaryCyclev+0x66e>
			{
				PressedButtonId = 16;
    13f4:	80 e1       	ldi	r24, 0x10	; 16
    13f6:	5f cf       	rjmp	.-322    	; 0x12b6 <_Z24ButtonMatrixPrimaryCyclev+0x52c>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
    13f8:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <SHORTPRESS_COUNT>
    13fc:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <SHORTPRESS_COUNT+0x1>
    1400:	28 17       	cp	r18, r24
    1402:	39 07       	cpc	r19, r25
    1404:	18 f4       	brcc	.+6      	; 0x140c <_Z24ButtonMatrixPrimaryCyclev+0x682>
			{
				PressedButtonId = 16;
    1406:	80 e1       	ldi	r24, 0x10	; 16
    1408:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <PressedButtonId>
			//<MOD>ACTIVE_COLUMN1;
			//<MOD>ActiveColumn = BTNMATRIX_COLUMN1;
		}
	}
	
	if (ButtonIdReadFlag == 1)
    140c:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <ButtonIdReadFlag>
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	b9 f4       	brne	.+46     	; 0x1442 <_Z24ButtonMatrixPrimaryCyclev+0x6b8>
	{
		PressedButtonId = 0;
    1414:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <PressedButtonId>
		NextButtonDelayCount++;
    1418:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <NextButtonDelayCount>
    141c:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <NextButtonDelayCount+0x1>
    1420:	01 96       	adiw	r24, 0x01	; 1
    1422:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <NextButtonDelayCount+0x1>
    1426:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <NextButtonDelayCount>
		
		if (NextButtonDelayCount > 5)
    142a:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <NextButtonDelayCount>
    142e:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <NextButtonDelayCount+0x1>
    1432:	06 97       	sbiw	r24, 0x06	; 6
    1434:	30 f0       	brcs	.+12     	; 0x1442 <_Z24ButtonMatrixPrimaryCyclev+0x6b8>
		{
			NextButtonDelayCount = 0;
    1436:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <NextButtonDelayCount+0x1>
    143a:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <NextButtonDelayCount>
			ButtonIdReadFlag = 0;
    143e:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <ButtonIdReadFlag>
		}
	}
	
	if (click != 1)
    1442:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <click>
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	51 f0       	breq	.+20     	; 0x145e <_Z24ButtonMatrixPrimaryCyclev+0x6d4>
	{
		BtnPressCount = 0;
    144a:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <BtnPressCount+0x1>
    144e:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <BtnPressCount>
		PressedButtonId = 0;
    1452:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <PressedButtonId>
		LongPress = 0;
    1456:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <LongPress>
		Button = 0;
    145a:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <Button>
	}
	
	click = 0;
    145e:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <click>
}
    1462:	cf 91       	pop	r28
    1464:	08 95       	ret

00001466 <initVariant>:
    1466:	08 95       	ret

00001468 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1468:	a0 d0       	rcall	.+320    	; 0x15aa <init>

	initVariant();
    146a:	fd df       	rcall	.-6      	; 0x1466 <initVariant>
    146c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1470:	c0 e0       	ldi	r28, 0x00	; 0
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1472:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    1474:	b5 d8       	rcall	.-3734   	; 0x5e0 <loop>
    1476:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    1478:	e9 f3       	breq	.-6      	; 0x1474 <main+0xc>
    147a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    147e:	fa cf       	rjmp	.-12     	; 0x1474 <main+0xc>

00001480 <_ZN5Print5writeEPKhj>:
    1480:	cf 92       	push	r12
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	6c 01       	movw	r12, r24
    1492:	7a 01       	movw	r14, r20
    1494:	8b 01       	movw	r16, r22
    1496:	c0 e0       	ldi	r28, 0x00	; 0
    1498:	d0 e0       	ldi	r29, 0x00	; 0
    149a:	ce 15       	cp	r28, r14
    149c:	df 05       	cpc	r29, r15
    149e:	81 f0       	breq	.+32     	; 0x14c0 <_ZN5Print5writeEPKhj+0x40>
    14a0:	d8 01       	movw	r26, r16
    14a2:	6d 91       	ld	r22, X+
    14a4:	8d 01       	movw	r16, r26
    14a6:	d6 01       	movw	r26, r12
    14a8:	ed 91       	ld	r30, X+
    14aa:	fc 91       	ld	r31, X
    14ac:	01 90       	ld	r0, Z+
    14ae:	f0 81       	ld	r31, Z
    14b0:	e0 2d       	mov	r30, r0
    14b2:	c6 01       	movw	r24, r12
    14b4:	19 95       	eicall
    14b6:	89 2b       	or	r24, r25
    14b8:	11 f0       	breq	.+4      	; 0x14be <_ZN5Print5writeEPKhj+0x3e>
    14ba:	21 96       	adiw	r28, 0x01	; 1
    14bc:	ee cf       	rjmp	.-36     	; 0x149a <_ZN5Print5writeEPKhj+0x1a>
    14be:	7e 01       	movw	r14, r28
    14c0:	c7 01       	movw	r24, r14
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	ff 90       	pop	r15
    14cc:	ef 90       	pop	r14
    14ce:	df 90       	pop	r13
    14d0:	cf 90       	pop	r12
    14d2:	08 95       	ret

000014d4 <_ZN5Print5writeEPKc>:
    14d4:	61 15       	cp	r22, r1
    14d6:	71 05       	cpc	r23, r1
    14d8:	79 f0       	breq	.+30     	; 0x14f8 <_ZN5Print5writeEPKc+0x24>
    14da:	fb 01       	movw	r30, r22
    14dc:	01 90       	ld	r0, Z+
    14de:	00 20       	and	r0, r0
    14e0:	e9 f7       	brne	.-6      	; 0x14dc <_ZN5Print5writeEPKc+0x8>
    14e2:	31 97       	sbiw	r30, 0x01	; 1
    14e4:	af 01       	movw	r20, r30
    14e6:	46 1b       	sub	r20, r22
    14e8:	57 0b       	sbc	r21, r23
    14ea:	dc 01       	movw	r26, r24
    14ec:	ed 91       	ld	r30, X+
    14ee:	fc 91       	ld	r31, X
    14f0:	02 80       	ldd	r0, Z+2	; 0x02
    14f2:	f3 81       	ldd	r31, Z+3	; 0x03
    14f4:	e0 2d       	mov	r30, r0
    14f6:	19 94       	eijmp
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	08 95       	ret

000014fe <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    14fe:	ea cf       	rjmp	.-44     	; 0x14d4 <_ZN5Print5writeEPKc>

00001500 <__vector_23>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1500:	1f 92       	push	r1
    1502:	0f 92       	push	r0
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	0f 92       	push	r0
    1508:	11 24       	eor	r1, r1
    150a:	2f 93       	push	r18
    150c:	3f 93       	push	r19
    150e:	8f 93       	push	r24
    1510:	9f 93       	push	r25
    1512:	af 93       	push	r26
    1514:	bf 93       	push	r27
    1516:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <timer0_millis>
    151a:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <timer0_millis+0x1>
    151e:	a0 91 26 03 	lds	r26, 0x0326	; 0x800326 <timer0_millis+0x2>
    1522:	b0 91 27 03 	lds	r27, 0x0327	; 0x800327 <timer0_millis+0x3>
    1526:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <timer0_fract>
    152a:	23 e0       	ldi	r18, 0x03	; 3
    152c:	23 0f       	add	r18, r19
    152e:	2d 37       	cpi	r18, 0x7D	; 125
    1530:	20 f4       	brcc	.+8      	; 0x153a <__vector_23+0x3a>
    1532:	01 96       	adiw	r24, 0x01	; 1
    1534:	a1 1d       	adc	r26, r1
    1536:	b1 1d       	adc	r27, r1
    1538:	05 c0       	rjmp	.+10     	; 0x1544 <__vector_23+0x44>
    153a:	26 e8       	ldi	r18, 0x86	; 134
    153c:	23 0f       	add	r18, r19
    153e:	02 96       	adiw	r24, 0x02	; 2
    1540:	a1 1d       	adc	r26, r1
    1542:	b1 1d       	adc	r27, r1
    1544:	20 93 23 03 	sts	0x0323, r18	; 0x800323 <timer0_fract>
    1548:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <timer0_millis>
    154c:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <timer0_millis+0x1>
    1550:	a0 93 26 03 	sts	0x0326, r26	; 0x800326 <timer0_millis+0x2>
    1554:	b0 93 27 03 	sts	0x0327, r27	; 0x800327 <timer0_millis+0x3>
    1558:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <timer0_overflow_count>
    155c:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <timer0_overflow_count+0x1>
    1560:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <timer0_overflow_count+0x2>
    1564:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <timer0_overflow_count+0x3>
    1568:	01 96       	adiw	r24, 0x01	; 1
    156a:	a1 1d       	adc	r26, r1
    156c:	b1 1d       	adc	r27, r1
    156e:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <timer0_overflow_count>
    1572:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <timer0_overflow_count+0x1>
    1576:	a0 93 2a 03 	sts	0x032A, r26	; 0x80032a <timer0_overflow_count+0x2>
    157a:	b0 93 2b 03 	sts	0x032B, r27	; 0x80032b <timer0_overflow_count+0x3>
    157e:	bf 91       	pop	r27
    1580:	af 91       	pop	r26
    1582:	9f 91       	pop	r25
    1584:	8f 91       	pop	r24
    1586:	3f 91       	pop	r19
    1588:	2f 91       	pop	r18
    158a:	0f 90       	pop	r0
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	0f 90       	pop	r0
    1590:	1f 90       	pop	r1
    1592:	18 95       	reti

00001594 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1594:	82 30       	cpi	r24, 0x02	; 2
    1596:	91 05       	cpc	r25, r1
    1598:	38 f0       	brcs	.+14     	; 0x15a8 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    15a2:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <delayMicroseconds+0x10>
    15a8:	08 95       	ret

000015aa <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    15aa:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    15ac:	84 b5       	in	r24, 0x24	; 36
    15ae:	82 60       	ori	r24, 0x02	; 2
    15b0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    15b2:	84 b5       	in	r24, 0x24	; 36
    15b4:	81 60       	ori	r24, 0x01	; 1
    15b6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    15b8:	85 b5       	in	r24, 0x25	; 37
    15ba:	82 60       	ori	r24, 0x02	; 2
    15bc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    15be:	85 b5       	in	r24, 0x25	; 37
    15c0:	81 60       	ori	r24, 0x01	; 1
    15c2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    15c4:	ee e6       	ldi	r30, 0x6E	; 110
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	81 60       	ori	r24, 0x01	; 1
    15cc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    15ce:	e1 e8       	ldi	r30, 0x81	; 129
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    15d4:	80 81       	ld	r24, Z
    15d6:	82 60       	ori	r24, 0x02	; 2
    15d8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    15da:	80 81       	ld	r24, Z
    15dc:	81 60       	ori	r24, 0x01	; 1
    15de:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    15e0:	e0 e8       	ldi	r30, 0x80	; 128
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	81 60       	ori	r24, 0x01	; 1
    15e8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    15ea:	e1 eb       	ldi	r30, 0xB1	; 177
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	84 60       	ori	r24, 0x04	; 4
    15f2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    15f4:	e0 eb       	ldi	r30, 0xB0	; 176
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	81 60       	ori	r24, 0x01	; 1
    15fc:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    15fe:	e1 e9       	ldi	r30, 0x91	; 145
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	82 60       	ori	r24, 0x02	; 2
    1606:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1608:	80 81       	ld	r24, Z
    160a:	81 60       	ori	r24, 0x01	; 1
    160c:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    160e:	e0 e9       	ldi	r30, 0x90	; 144
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	81 60       	ori	r24, 0x01	; 1
    1616:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1618:	e1 ea       	ldi	r30, 0xA1	; 161
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	82 60       	ori	r24, 0x02	; 2
    1620:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1622:	80 81       	ld	r24, Z
    1624:	81 60       	ori	r24, 0x01	; 1
    1626:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1628:	e0 ea       	ldi	r30, 0xA0	; 160
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	81 60       	ori	r24, 0x01	; 1
    1630:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    1632:	e1 e2       	ldi	r30, 0x21	; 33
    1634:	f1 e0       	ldi	r31, 0x01	; 1
    1636:	80 81       	ld	r24, Z
    1638:	82 60       	ori	r24, 0x02	; 2
    163a:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    163c:	80 81       	ld	r24, Z
    163e:	81 60       	ori	r24, 0x01	; 1
    1640:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    1642:	e0 e2       	ldi	r30, 0x20	; 32
    1644:	f1 e0       	ldi	r31, 0x01	; 1
    1646:	80 81       	ld	r24, Z
    1648:	81 60       	ori	r24, 0x01	; 1
    164a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    164c:	ea e7       	ldi	r30, 0x7A	; 122
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	84 60       	ori	r24, 0x04	; 4
    1654:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1656:	80 81       	ld	r24, Z
    1658:	82 60       	ori	r24, 0x02	; 2
    165a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    165c:	80 81       	ld	r24, Z
    165e:	81 60       	ori	r24, 0x01	; 1
    1660:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1662:	80 81       	ld	r24, Z
    1664:	80 68       	ori	r24, 0x80	; 128
    1666:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1668:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    166c:	08 95       	ret

0000166e <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    166e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <analog_reference>
    1672:	08 95       	ret

00001674 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    1674:	86 33       	cpi	r24, 0x36	; 54
    1676:	08 f0       	brcs	.+2      	; 0x167a <analogRead+0x6>
    1678:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    167a:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    167e:	28 2f       	mov	r18, r24
    1680:	28 70       	andi	r18, 0x08	; 8
    1682:	97 7f       	andi	r25, 0xF7	; 247
    1684:	92 2b       	or	r25, r18
    1686:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    168a:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <analog_reference>
    168e:	90 e4       	ldi	r25, 0x40	; 64
    1690:	29 9f       	mul	r18, r25
    1692:	90 01       	movw	r18, r0
    1694:	11 24       	eor	r1, r1
    1696:	87 70       	andi	r24, 0x07	; 7
    1698:	82 2b       	or	r24, r18
    169a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    169e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    16a2:	80 64       	ori	r24, 0x40	; 64
    16a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    16a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    16ac:	86 fd       	sbrc	r24, 6
    16ae:	fc cf       	rjmp	.-8      	; 0x16a8 <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    16b0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	high = ADCH;
    16b4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    16b8:	90 e0       	ldi	r25, 0x00	; 0
}
    16ba:	92 2b       	or	r25, r18
    16bc:	08 95       	ret

000016be <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	fc 01       	movw	r30, r24
    16c2:	31 97       	sbiw	r30, 0x01	; 1
    16c4:	e2 31       	cpi	r30, 0x12	; 18
    16c6:	f1 05       	cpc	r31, r1
    16c8:	08 f0       	brcs	.+2      	; 0x16cc <turnOffPWM+0xe>
    16ca:	4d c0       	rjmp	.+154    	; 0x1766 <turnOffPWM+0xa8>
    16cc:	88 27       	eor	r24, r24
    16ce:	ee 58       	subi	r30, 0x8E	; 142
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	8f 4f       	sbci	r24, 0xFF	; 255
    16d4:	8a c2       	rjmp	.+1300   	; 0x1bea <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    16d6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    16da:	8f 77       	andi	r24, 0x7F	; 127
    16dc:	03 c0       	rjmp	.+6      	; 0x16e4 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    16de:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    16e2:	8f 7d       	andi	r24, 0xDF	; 223
    16e4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    16e8:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    16ea:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    16ee:	87 7f       	andi	r24, 0xF7	; 247
    16f0:	f9 cf       	rjmp	.-14     	; 0x16e4 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    16f2:	84 b5       	in	r24, 0x24	; 36
    16f4:	8f 77       	andi	r24, 0x7F	; 127
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    16f8:	84 b5       	in	r24, 0x24	; 36
    16fa:	8f 7d       	andi	r24, 0xDF	; 223
    16fc:	84 bd       	out	0x24, r24	; 36
    16fe:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1700:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1704:	8f 77       	andi	r24, 0x7F	; 127
    1706:	03 c0       	rjmp	.+6      	; 0x170e <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1708:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    170c:	8f 7d       	andi	r24, 0xDF	; 223
    170e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1712:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1714:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1718:	8f 77       	andi	r24, 0x7F	; 127
    171a:	07 c0       	rjmp	.+14     	; 0x172a <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    171c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1720:	8f 7d       	andi	r24, 0xDF	; 223
    1722:	03 c0       	rjmp	.+6      	; 0x172a <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1724:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1728:	87 7f       	andi	r24, 0xF7	; 247
    172a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    172e:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1730:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1734:	8f 77       	andi	r24, 0x7F	; 127
    1736:	07 c0       	rjmp	.+14     	; 0x1746 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1738:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    173c:	8f 7d       	andi	r24, 0xDF	; 223
    173e:	03 c0       	rjmp	.+6      	; 0x1746 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    1740:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1744:	87 7f       	andi	r24, 0xF7	; 247
    1746:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    174a:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    174c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1750:	8f 77       	andi	r24, 0x7F	; 127
    1752:	07 c0       	rjmp	.+14     	; 0x1762 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    1754:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1758:	8f 7d       	andi	r24, 0xDF	; 223
    175a:	03 c0       	rjmp	.+6      	; 0x1762 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    175c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1760:	87 7f       	andi	r24, 0xF7	; 247
    1762:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1766:	08 95       	ret

00001768 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	fc 01       	movw	r30, r24
    1770:	e2 5b       	subi	r30, 0xB2	; 178
    1772:	fe 4f       	sbci	r31, 0xFE	; 254
    1774:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1776:	fc 01       	movw	r30, r24
    1778:	ec 56       	subi	r30, 0x6C	; 108
    177a:	fe 4f       	sbci	r31, 0xFE	; 254
    177c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    177e:	88 23       	and	r24, r24
    1780:	61 f1       	breq	.+88     	; 0x17da <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	fc 01       	movw	r30, r24
    178a:	e2 5f       	subi	r30, 0xF2	; 242
    178c:	fd 4f       	sbci	r31, 0xFD	; 253
    178e:	c5 91       	lpm	r28, Z+
    1790:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1792:	fc 01       	movw	r30, r24
    1794:	ec 50       	subi	r30, 0x0C	; 12
    1796:	fe 4f       	sbci	r31, 0xFE	; 254
    1798:	a5 91       	lpm	r26, Z+
    179a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    179c:	61 11       	cpse	r22, r1
    179e:	09 c0       	rjmp	.+18     	; 0x17b2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    17a0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    17a2:	f8 94       	cli
		*reg &= ~bit;
    17a4:	88 81       	ld	r24, Y
    17a6:	20 95       	com	r18
    17a8:	82 23       	and	r24, r18
    17aa:	88 83       	st	Y, r24
		*out &= ~bit;
    17ac:	ec 91       	ld	r30, X
    17ae:	2e 23       	and	r18, r30
    17b0:	0b c0       	rjmp	.+22     	; 0x17c8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    17b2:	62 30       	cpi	r22, 0x02	; 2
    17b4:	61 f4       	brne	.+24     	; 0x17ce <pinMode+0x66>
		uint8_t oldSREG = SREG;
    17b6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    17b8:	f8 94       	cli
		*reg &= ~bit;
    17ba:	88 81       	ld	r24, Y
    17bc:	32 2f       	mov	r19, r18
    17be:	30 95       	com	r19
    17c0:	83 23       	and	r24, r19
    17c2:	88 83       	st	Y, r24
		*out |= bit;
    17c4:	ec 91       	ld	r30, X
    17c6:	2e 2b       	or	r18, r30
    17c8:	2c 93       	st	X, r18
		SREG = oldSREG;
    17ca:	9f bf       	out	0x3f, r25	; 63
    17cc:	06 c0       	rjmp	.+12     	; 0x17da <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    17ce:	8f b7       	in	r24, 0x3f	; 63
                cli();
    17d0:	f8 94       	cli
		*reg |= bit;
    17d2:	e8 81       	ld	r30, Y
    17d4:	2e 2b       	or	r18, r30
    17d6:	28 83       	st	Y, r18
		SREG = oldSREG;
    17d8:	8f bf       	out	0x3f, r24	; 63
	}
}
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	08 95       	ret

000017e0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	f9 01       	movw	r30, r18
    17ec:	e8 5f       	subi	r30, 0xF8	; 248
    17ee:	fe 4f       	sbci	r31, 0xFE	; 254
    17f0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    17f2:	f9 01       	movw	r30, r18
    17f4:	e2 5b       	subi	r30, 0xB2	; 178
    17f6:	fe 4f       	sbci	r31, 0xFE	; 254
    17f8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    17fa:	f9 01       	movw	r30, r18
    17fc:	ec 56       	subi	r30, 0x6C	; 108
    17fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1800:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1802:	cc 23       	and	r28, r28
    1804:	b9 f0       	breq	.+46     	; 0x1834 <digitalWrite+0x54>
    1806:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1808:	81 11       	cpse	r24, r1
    180a:	59 df       	rcall	.-334    	; 0x16be <turnOffPWM>

	out = portOutputRegister(port);
    180c:	ec 2f       	mov	r30, r28
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	ee 0f       	add	r30, r30
    1812:	ff 1f       	adc	r31, r31
    1814:	ec 50       	subi	r30, 0x0C	; 12
    1816:	fe 4f       	sbci	r31, 0xFE	; 254
    1818:	a5 91       	lpm	r26, Z+
    181a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    181c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    181e:	f8 94       	cli

	if (val == LOW) {
    1820:	11 11       	cpse	r17, r1
    1822:	04 c0       	rjmp	.+8      	; 0x182c <digitalWrite+0x4c>
		*out &= ~bit;
    1824:	8c 91       	ld	r24, X
    1826:	d0 95       	com	r29
    1828:	d8 23       	and	r29, r24
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <digitalWrite+0x50>
	} else {
		*out |= bit;
    182c:	ec 91       	ld	r30, X
    182e:	de 2b       	or	r29, r30
    1830:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1832:	9f bf       	out	0x3f, r25	; 63
}
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	1f 91       	pop	r17
    183a:	08 95       	ret

0000183c <digitalRead>:

int digitalRead(uint8_t pin)
{
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	f9 01       	movw	r30, r18
    1846:	e8 5f       	subi	r30, 0xF8	; 248
    1848:	fe 4f       	sbci	r31, 0xFE	; 254
    184a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    184c:	f9 01       	movw	r30, r18
    184e:	e2 5b       	subi	r30, 0xB2	; 178
    1850:	fe 4f       	sbci	r31, 0xFE	; 254
    1852:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1854:	f9 01       	movw	r30, r18
    1856:	ec 56       	subi	r30, 0x6C	; 108
    1858:	fe 4f       	sbci	r31, 0xFE	; 254
    185a:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    185c:	cc 23       	and	r28, r28
    185e:	89 f0       	breq	.+34     	; 0x1882 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1860:	81 11       	cpse	r24, r1
    1862:	2d df       	rcall	.-422    	; 0x16be <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1864:	ec 2f       	mov	r30, r28
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	ee 0f       	add	r30, r30
    186a:	ff 1f       	adc	r31, r31
    186c:	e6 52       	subi	r30, 0x26	; 38
    186e:	fe 4f       	sbci	r31, 0xFE	; 254
    1870:	a5 91       	lpm	r26, Z+
    1872:	b4 91       	lpm	r27, Z
    1874:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1876:	ed 23       	and	r30, r29
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	21 f4       	brne	.+8      	; 0x1886 <digitalRead+0x4a>
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <digitalRead+0x4a>
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	08 95       	ret

0000188c <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	ec 01       	movw	r28, r24
    1892:	60 e0       	ldi	r22, 0x00	; 0
    1894:	8e 81       	ldd	r24, Y+6	; 0x06
    1896:	a4 df       	rcall	.-184    	; 0x17e0 <digitalWrite>
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	7b de       	rcall	.-778    	; 0x1594 <delayMicroseconds>
    189e:	61 e0       	ldi	r22, 0x01	; 1
    18a0:	8e 81       	ldd	r24, Y+6	; 0x06
    18a2:	9e df       	rcall	.-196    	; 0x17e0 <digitalWrite>
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	75 de       	rcall	.-790    	; 0x1594 <delayMicroseconds>
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	8e 81       	ldd	r24, Y+6	; 0x06
    18ae:	98 df       	rcall	.-208    	; 0x17e0 <digitalWrite>
    18b0:	84 e6       	ldi	r24, 0x64	; 100
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	6d ce       	rjmp	.-806    	; 0x1594 <delayMicroseconds>

000018ba <_ZN13LiquidCrystal10write4bitsEh>:
    18ba:	cf 92       	push	r12
    18bc:	df 92       	push	r13
    18be:	ef 92       	push	r14
    18c0:	ff 92       	push	r15
    18c2:	0f 93       	push	r16
    18c4:	1f 93       	push	r17
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	6c 01       	movw	r12, r24
    18cc:	7c 01       	movw	r14, r24
    18ce:	87 e0       	ldi	r24, 0x07	; 7
    18d0:	e8 0e       	add	r14, r24
    18d2:	f1 1c       	adc	r15, r1
    18d4:	c0 e0       	ldi	r28, 0x00	; 0
    18d6:	d0 e0       	ldi	r29, 0x00	; 0
    18d8:	06 2f       	mov	r16, r22
    18da:	10 e0       	ldi	r17, 0x00	; 0
    18dc:	b8 01       	movw	r22, r16
    18de:	0c 2e       	mov	r0, r28
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    18e2:	75 95       	asr	r23
    18e4:	67 95       	ror	r22
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <_ZN13LiquidCrystal10write4bitsEh+0x28>
    18ea:	61 70       	andi	r22, 0x01	; 1
    18ec:	f7 01       	movw	r30, r14
    18ee:	81 91       	ld	r24, Z+
    18f0:	7f 01       	movw	r14, r30
    18f2:	76 df       	rcall	.-276    	; 0x17e0 <digitalWrite>
    18f4:	21 96       	adiw	r28, 0x01	; 1
    18f6:	c4 30       	cpi	r28, 0x04	; 4
    18f8:	d1 05       	cpc	r29, r1
    18fa:	81 f7       	brne	.-32     	; 0x18dc <_ZN13LiquidCrystal10write4bitsEh+0x22>
    18fc:	c6 01       	movw	r24, r12
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	1f 91       	pop	r17
    1904:	0f 91       	pop	r16
    1906:	ff 90       	pop	r15
    1908:	ef 90       	pop	r14
    190a:	df 90       	pop	r13
    190c:	cf 90       	pop	r12
    190e:	be cf       	rjmp	.-132    	; 0x188c <_ZN13LiquidCrystal11pulseEnableEv>

00001910 <_ZN13LiquidCrystal10write8bitsEh>:
    1910:	cf 92       	push	r12
    1912:	df 92       	push	r13
    1914:	ef 92       	push	r14
    1916:	ff 92       	push	r15
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	6c 01       	movw	r12, r24
    1922:	7c 01       	movw	r14, r24
    1924:	87 e0       	ldi	r24, 0x07	; 7
    1926:	e8 0e       	add	r14, r24
    1928:	f1 1c       	adc	r15, r1
    192a:	c0 e0       	ldi	r28, 0x00	; 0
    192c:	d0 e0       	ldi	r29, 0x00	; 0
    192e:	06 2f       	mov	r16, r22
    1930:	10 e0       	ldi	r17, 0x00	; 0
    1932:	b8 01       	movw	r22, r16
    1934:	0c 2e       	mov	r0, r28
    1936:	02 c0       	rjmp	.+4      	; 0x193c <_ZN13LiquidCrystal10write8bitsEh+0x2c>
    1938:	75 95       	asr	r23
    193a:	67 95       	ror	r22
    193c:	0a 94       	dec	r0
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <_ZN13LiquidCrystal10write8bitsEh+0x28>
    1940:	61 70       	andi	r22, 0x01	; 1
    1942:	f7 01       	movw	r30, r14
    1944:	81 91       	ld	r24, Z+
    1946:	7f 01       	movw	r14, r30
    1948:	4b df       	rcall	.-362    	; 0x17e0 <digitalWrite>
    194a:	21 96       	adiw	r28, 0x01	; 1
    194c:	c8 30       	cpi	r28, 0x08	; 8
    194e:	d1 05       	cpc	r29, r1
    1950:	81 f7       	brne	.-32     	; 0x1932 <_ZN13LiquidCrystal10write8bitsEh+0x22>
    1952:	c6 01       	movw	r24, r12
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	ff 90       	pop	r15
    195e:	ef 90       	pop	r14
    1960:	df 90       	pop	r13
    1962:	cf 90       	pop	r12
    1964:	93 cf       	rjmp	.-218    	; 0x188c <_ZN13LiquidCrystal11pulseEnableEv>

00001966 <_ZN13LiquidCrystal4sendEhh>:
    1966:	1f 93       	push	r17
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	ec 01       	movw	r28, r24
    196e:	16 2f       	mov	r17, r22
    1970:	64 2f       	mov	r22, r20
    1972:	8c 81       	ldd	r24, Y+4	; 0x04
    1974:	35 df       	rcall	.-406    	; 0x17e0 <digitalWrite>
    1976:	8d 81       	ldd	r24, Y+5	; 0x05
    1978:	8f 3f       	cpi	r24, 0xFF	; 255
    197a:	11 f0       	breq	.+4      	; 0x1980 <_ZN13LiquidCrystal4sendEhh+0x1a>
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	30 df       	rcall	.-416    	; 0x17e0 <digitalWrite>
    1980:	8f 85       	ldd	r24, Y+15	; 0x0f
    1982:	61 2f       	mov	r22, r17
    1984:	84 ff       	sbrs	r24, 4
    1986:	05 c0       	rjmp	.+10     	; 0x1992 <_ZN13LiquidCrystal4sendEhh+0x2c>
    1988:	ce 01       	movw	r24, r28
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	1f 91       	pop	r17
    1990:	bf cf       	rjmp	.-130    	; 0x1910 <_ZN13LiquidCrystal10write8bitsEh>
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	84 e0       	ldi	r24, 0x04	; 4
    1996:	75 95       	asr	r23
    1998:	67 95       	ror	r22
    199a:	8a 95       	dec	r24
    199c:	e1 f7       	brne	.-8      	; 0x1996 <_ZN13LiquidCrystal4sendEhh+0x30>
    199e:	ce 01       	movw	r24, r28
    19a0:	8c df       	rcall	.-232    	; 0x18ba <_ZN13LiquidCrystal10write4bitsEh>
    19a2:	61 2f       	mov	r22, r17
    19a4:	ce 01       	movw	r24, r28
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	1f 91       	pop	r17
    19ac:	86 cf       	rjmp	.-244    	; 0x18ba <_ZN13LiquidCrystal10write4bitsEh>

000019ae <_ZN13LiquidCrystal7commandEh>:
    19ae:	40 e0       	ldi	r20, 0x00	; 0
    19b0:	da cf       	rjmp	.-76     	; 0x1966 <_ZN13LiquidCrystal4sendEhh>

000019b2 <_ZN13LiquidCrystal5clearEv>:
    19b2:	61 e0       	ldi	r22, 0x01	; 1
    19b4:	fc df       	rcall	.-8      	; 0x19ae <_ZN13LiquidCrystal7commandEh>
    19b6:	80 ed       	ldi	r24, 0xD0	; 208
    19b8:	97 e0       	ldi	r25, 0x07	; 7
    19ba:	ec cd       	rjmp	.-1064   	; 0x1594 <delayMicroseconds>

000019bc <_ZN13LiquidCrystal9setCursorEhh>:
    19bc:	fc 01       	movw	r30, r24
    19be:	44 30       	cpi	r20, 0x04	; 4
    19c0:	08 f0       	brcs	.+2      	; 0x19c4 <_ZN13LiquidCrystal9setCursorEhh+0x8>
    19c2:	43 e0       	ldi	r20, 0x03	; 3
    19c4:	83 89       	ldd	r24, Z+19	; 0x13
    19c6:	48 17       	cp	r20, r24
    19c8:	10 f0       	brcs	.+4      	; 0x19ce <_ZN13LiquidCrystal9setCursorEhh+0x12>
    19ca:	4f ef       	ldi	r20, 0xFF	; 255
    19cc:	48 0f       	add	r20, r24
    19ce:	df 01       	movw	r26, r30
    19d0:	a4 0f       	add	r26, r20
    19d2:	b1 1d       	adc	r27, r1
    19d4:	54 96       	adiw	r26, 0x14	; 20
    19d6:	9c 91       	ld	r25, X
    19d8:	69 0f       	add	r22, r25
    19da:	60 68       	ori	r22, 0x80	; 128
    19dc:	cf 01       	movw	r24, r30
    19de:	e7 cf       	rjmp	.-50     	; 0x19ae <_ZN13LiquidCrystal7commandEh>

000019e0 <_ZN13LiquidCrystal7displayEv>:
    19e0:	fc 01       	movw	r30, r24
    19e2:	60 89       	ldd	r22, Z+16	; 0x10
    19e4:	26 2f       	mov	r18, r22
    19e6:	24 60       	ori	r18, 0x04	; 4
    19e8:	20 8b       	std	Z+16, r18	; 0x10
    19ea:	6c 60       	ori	r22, 0x0C	; 12
    19ec:	e0 cf       	rjmp	.-64     	; 0x19ae <_ZN13LiquidCrystal7commandEh>

000019ee <_ZN13LiquidCrystal5beginEhhh>:
    19ee:	ef 92       	push	r14
    19f0:	ff 92       	push	r15
    19f2:	0f 93       	push	r16
    19f4:	1f 93       	push	r17
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	ec 01       	movw	r28, r24
    19fc:	42 30       	cpi	r20, 0x02	; 2
    19fe:	18 f0       	brcs	.+6      	; 0x1a06 <_ZN13LiquidCrystal5beginEhhh+0x18>
    1a00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a02:	88 60       	ori	r24, 0x08	; 8
    1a04:	8f 87       	std	Y+15, r24	; 0x0f
    1a06:	4b 8b       	std	Y+19, r20	; 0x13
    1a08:	1c 8a       	std	Y+20, r1	; 0x14
    1a0a:	80 e4       	ldi	r24, 0x40	; 64
    1a0c:	8d 8b       	std	Y+21, r24	; 0x15
    1a0e:	6e 8b       	std	Y+22, r22	; 0x16
    1a10:	70 e0       	ldi	r23, 0x00	; 0
    1a12:	60 5c       	subi	r22, 0xC0	; 192
    1a14:	7f 4f       	sbci	r23, 0xFF	; 255
    1a16:	6f 8b       	std	Y+23, r22	; 0x17
    1a18:	22 23       	and	r18, r18
    1a1a:	29 f0       	breq	.+10     	; 0x1a26 <_ZN13LiquidCrystal5beginEhhh+0x38>
    1a1c:	41 30       	cpi	r20, 0x01	; 1
    1a1e:	19 f4       	brne	.+6      	; 0x1a26 <_ZN13LiquidCrystal5beginEhhh+0x38>
    1a20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a22:	84 60       	ori	r24, 0x04	; 4
    1a24:	8f 87       	std	Y+15, r24	; 0x0f
    1a26:	61 e0       	ldi	r22, 0x01	; 1
    1a28:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2a:	9e de       	rcall	.-708    	; 0x1768 <pinMode>
    1a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a30:	11 f0       	breq	.+4      	; 0x1a36 <_ZN13LiquidCrystal5beginEhhh+0x48>
    1a32:	61 e0       	ldi	r22, 0x01	; 1
    1a34:	99 de       	rcall	.-718    	; 0x1768 <pinMode>
    1a36:	61 e0       	ldi	r22, 0x01	; 1
    1a38:	8e 81       	ldd	r24, Y+6	; 0x06
    1a3a:	96 de       	rcall	.-724    	; 0x1768 <pinMode>
    1a3c:	7e 01       	movw	r14, r28
    1a3e:	87 e0       	ldi	r24, 0x07	; 7
    1a40:	e8 0e       	add	r14, r24
    1a42:	f1 1c       	adc	r15, r1
    1a44:	00 e0       	ldi	r16, 0x00	; 0
    1a46:	10 e0       	ldi	r17, 0x00	; 0
    1a48:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a4a:	84 fd       	sbrc	r24, 4
    1a4c:	03 c0       	rjmp	.+6      	; 0x1a54 <_ZN13LiquidCrystal5beginEhhh+0x66>
    1a4e:	84 e0       	ldi	r24, 0x04	; 4
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <_ZN13LiquidCrystal5beginEhhh+0x6a>
    1a54:	88 e0       	ldi	r24, 0x08	; 8
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	08 17       	cp	r16, r24
    1a5a:	19 07       	cpc	r17, r25
    1a5c:	44 f4       	brge	.+16     	; 0x1a6e <_ZN13LiquidCrystal5beginEhhh+0x80>
    1a5e:	61 e0       	ldi	r22, 0x01	; 1
    1a60:	f7 01       	movw	r30, r14
    1a62:	81 91       	ld	r24, Z+
    1a64:	7f 01       	movw	r14, r30
    1a66:	80 de       	rcall	.-768    	; 0x1768 <pinMode>
    1a68:	0f 5f       	subi	r16, 0xFF	; 255
    1a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6c:	ed cf       	rjmp	.-38     	; 0x1a48 <_ZN13LiquidCrystal5beginEhhh+0x5a>
    1a6e:	80 e5       	ldi	r24, 0x50	; 80
    1a70:	93 ec       	ldi	r25, 0xC3	; 195
    1a72:	90 dd       	rcall	.-1248   	; 0x1594 <delayMicroseconds>
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	8c 81       	ldd	r24, Y+4	; 0x04
    1a78:	b3 de       	rcall	.-666    	; 0x17e0 <digitalWrite>
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a7e:	b0 de       	rcall	.-672    	; 0x17e0 <digitalWrite>
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	8f 3f       	cpi	r24, 0xFF	; 255
    1a84:	11 f0       	breq	.+4      	; 0x1a8a <_ZN13LiquidCrystal5beginEhhh+0x9c>
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	ab de       	rcall	.-682    	; 0x17e0 <digitalWrite>
    1a8a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a8c:	64 fd       	sbrc	r22, 4
    1a8e:	16 c0       	rjmp	.+44     	; 0x1abc <_ZN13LiquidCrystal5beginEhhh+0xce>
    1a90:	63 e0       	ldi	r22, 0x03	; 3
    1a92:	ce 01       	movw	r24, r28
    1a94:	12 df       	rcall	.-476    	; 0x18ba <_ZN13LiquidCrystal10write4bitsEh>
    1a96:	84 e9       	ldi	r24, 0x94	; 148
    1a98:	91 e1       	ldi	r25, 0x11	; 17
    1a9a:	7c dd       	rcall	.-1288   	; 0x1594 <delayMicroseconds>
    1a9c:	63 e0       	ldi	r22, 0x03	; 3
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	0c df       	rcall	.-488    	; 0x18ba <_ZN13LiquidCrystal10write4bitsEh>
    1aa2:	84 e9       	ldi	r24, 0x94	; 148
    1aa4:	91 e1       	ldi	r25, 0x11	; 17
    1aa6:	76 dd       	rcall	.-1300   	; 0x1594 <delayMicroseconds>
    1aa8:	63 e0       	ldi	r22, 0x03	; 3
    1aaa:	ce 01       	movw	r24, r28
    1aac:	06 df       	rcall	.-500    	; 0x18ba <_ZN13LiquidCrystal10write4bitsEh>
    1aae:	86 e9       	ldi	r24, 0x96	; 150
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	70 dd       	rcall	.-1312   	; 0x1594 <delayMicroseconds>
    1ab4:	62 e0       	ldi	r22, 0x02	; 2
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	00 df       	rcall	.-512    	; 0x18ba <_ZN13LiquidCrystal10write4bitsEh>
    1aba:	11 c0       	rjmp	.+34     	; 0x1ade <_ZN13LiquidCrystal5beginEhhh+0xf0>
    1abc:	60 62       	ori	r22, 0x20	; 32
    1abe:	ce 01       	movw	r24, r28
    1ac0:	76 df       	rcall	.-276    	; 0x19ae <_ZN13LiquidCrystal7commandEh>
    1ac2:	84 e9       	ldi	r24, 0x94	; 148
    1ac4:	91 e1       	ldi	r25, 0x11	; 17
    1ac6:	66 dd       	rcall	.-1332   	; 0x1594 <delayMicroseconds>
    1ac8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1aca:	60 62       	ori	r22, 0x20	; 32
    1acc:	ce 01       	movw	r24, r28
    1ace:	6f df       	rcall	.-290    	; 0x19ae <_ZN13LiquidCrystal7commandEh>
    1ad0:	86 e9       	ldi	r24, 0x96	; 150
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	5f dd       	rcall	.-1346   	; 0x1594 <delayMicroseconds>
    1ad6:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ad8:	60 62       	ori	r22, 0x20	; 32
    1ada:	ce 01       	movw	r24, r28
    1adc:	68 df       	rcall	.-304    	; 0x19ae <_ZN13LiquidCrystal7commandEh>
    1ade:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ae0:	60 62       	ori	r22, 0x20	; 32
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	64 df       	rcall	.-312    	; 0x19ae <_ZN13LiquidCrystal7commandEh>
    1ae6:	84 e0       	ldi	r24, 0x04	; 4
    1ae8:	88 8b       	std	Y+16, r24	; 0x10
    1aea:	ce 01       	movw	r24, r28
    1aec:	79 df       	rcall	.-270    	; 0x19e0 <_ZN13LiquidCrystal7displayEv>
    1aee:	ce 01       	movw	r24, r28
    1af0:	60 df       	rcall	.-320    	; 0x19b2 <_ZN13LiquidCrystal5clearEv>
    1af2:	82 e0       	ldi	r24, 0x02	; 2
    1af4:	89 8b       	std	Y+17, r24	; 0x11
    1af6:	66 e0       	ldi	r22, 0x06	; 6
    1af8:	ce 01       	movw	r24, r28
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	1f 91       	pop	r17
    1b00:	0f 91       	pop	r16
    1b02:	ff 90       	pop	r15
    1b04:	ef 90       	pop	r14
    1b06:	53 cf       	rjmp	.-346    	; 0x19ae <_ZN13LiquidCrystal7commandEh>

00001b08 <_ZN13LiquidCrystalC1Ehhhhhh>:
    1b08:	cf 92       	push	r12
    1b0a:	ef 92       	push	r14
    1b0c:	0f 93       	push	r16
    1b0e:	fc 01       	movw	r30, r24
    1b10:	13 82       	std	Z+3, r1	; 0x03
    1b12:	12 82       	std	Z+2, r1	; 0x02
    1b14:	89 e8       	ldi	r24, 0x89	; 137
    1b16:	92 e0       	ldi	r25, 0x02	; 2
    1b18:	91 83       	std	Z+1, r25	; 0x01
    1b1a:	80 83       	st	Z, r24
    1b1c:	64 83       	std	Z+4, r22	; 0x04
    1b1e:	8f ef       	ldi	r24, 0xFF	; 255
    1b20:	85 83       	std	Z+5, r24	; 0x05
    1b22:	46 83       	std	Z+6, r20	; 0x06
    1b24:	27 83       	std	Z+7, r18	; 0x07
    1b26:	00 87       	std	Z+8, r16	; 0x08
    1b28:	e1 86       	std	Z+9, r14	; 0x09
    1b2a:	c2 86       	std	Z+10, r12	; 0x0a
    1b2c:	13 86       	std	Z+11, r1	; 0x0b
    1b2e:	14 86       	std	Z+12, r1	; 0x0c
    1b30:	15 86       	std	Z+13, r1	; 0x0d
    1b32:	16 86       	std	Z+14, r1	; 0x0e
    1b34:	17 86       	std	Z+15, r1	; 0x0f
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	41 e0       	ldi	r20, 0x01	; 1
    1b3a:	60 e1       	ldi	r22, 0x10	; 16
    1b3c:	cf 01       	movw	r24, r30
    1b3e:	0f 91       	pop	r16
    1b40:	ef 90       	pop	r14
    1b42:	cf 90       	pop	r12
    1b44:	54 cf       	rjmp	.-344    	; 0x19ee <_ZN13LiquidCrystal5beginEhhh>

00001b46 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	0e df       	rcall	.-484    	; 0x1966 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	08 95       	ret

00001b50 <__vector_20>:
void (*TimerOne::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
    1b50:	1f 92       	push	r1
    1b52:	0f 92       	push	r0
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	0f 92       	push	r0
    1b58:	11 24       	eor	r1, r1
    1b5a:	0b b6       	in	r0, 0x3b	; 59
    1b5c:	0f 92       	push	r0
    1b5e:	2f 93       	push	r18
    1b60:	3f 93       	push	r19
    1b62:	4f 93       	push	r20
    1b64:	5f 93       	push	r21
    1b66:	6f 93       	push	r22
    1b68:	7f 93       	push	r23
    1b6a:	8f 93       	push	r24
    1b6c:	9f 93       	push	r25
    1b6e:	af 93       	push	r26
    1b70:	bf 93       	push	r27
    1b72:	ef 93       	push	r30
    1b74:	ff 93       	push	r31
  Timer1.isrCallback();
    1b76:	e0 91 2c 03 	lds	r30, 0x032C	; 0x80032c <_ZN8TimerOne11isrCallbackE>
    1b7a:	f0 91 2d 03 	lds	r31, 0x032D	; 0x80032d <_ZN8TimerOne11isrCallbackE+0x1>
    1b7e:	19 95       	eicall
}
    1b80:	ff 91       	pop	r31
    1b82:	ef 91       	pop	r30
    1b84:	bf 91       	pop	r27
    1b86:	af 91       	pop	r26
    1b88:	9f 91       	pop	r25
    1b8a:	8f 91       	pop	r24
    1b8c:	7f 91       	pop	r23
    1b8e:	6f 91       	pop	r22
    1b90:	5f 91       	pop	r21
    1b92:	4f 91       	pop	r20
    1b94:	3f 91       	pop	r19
    1b96:	2f 91       	pop	r18
    1b98:	0f 90       	pop	r0
    1b9a:	0b be       	out	0x3b, r0	; 59
    1b9c:	0f 90       	pop	r0
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	0f 90       	pop	r0
    1ba2:	1f 90       	pop	r1
    1ba4:	18 95       	reti

00001ba6 <__udivmodsi4>:
    1ba6:	a1 e2       	ldi	r26, 0x21	; 33
    1ba8:	1a 2e       	mov	r1, r26
    1baa:	aa 1b       	sub	r26, r26
    1bac:	bb 1b       	sub	r27, r27
    1bae:	fd 01       	movw	r30, r26
    1bb0:	0d c0       	rjmp	.+26     	; 0x1bcc <__udivmodsi4_ep>

00001bb2 <__udivmodsi4_loop>:
    1bb2:	aa 1f       	adc	r26, r26
    1bb4:	bb 1f       	adc	r27, r27
    1bb6:	ee 1f       	adc	r30, r30
    1bb8:	ff 1f       	adc	r31, r31
    1bba:	a2 17       	cp	r26, r18
    1bbc:	b3 07       	cpc	r27, r19
    1bbe:	e4 07       	cpc	r30, r20
    1bc0:	f5 07       	cpc	r31, r21
    1bc2:	20 f0       	brcs	.+8      	; 0x1bcc <__udivmodsi4_ep>
    1bc4:	a2 1b       	sub	r26, r18
    1bc6:	b3 0b       	sbc	r27, r19
    1bc8:	e4 0b       	sbc	r30, r20
    1bca:	f5 0b       	sbc	r31, r21

00001bcc <__udivmodsi4_ep>:
    1bcc:	66 1f       	adc	r22, r22
    1bce:	77 1f       	adc	r23, r23
    1bd0:	88 1f       	adc	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	1a 94       	dec	r1
    1bd6:	69 f7       	brne	.-38     	; 0x1bb2 <__udivmodsi4_loop>
    1bd8:	60 95       	com	r22
    1bda:	70 95       	com	r23
    1bdc:	80 95       	com	r24
    1bde:	90 95       	com	r25
    1be0:	9b 01       	movw	r18, r22
    1be2:	ac 01       	movw	r20, r24
    1be4:	bd 01       	movw	r22, r26
    1be6:	cf 01       	movw	r24, r30
    1be8:	08 95       	ret

00001bea <__tablejump2__>:
    1bea:	ee 0f       	add	r30, r30
    1bec:	ff 1f       	adc	r31, r31
    1bee:	88 1f       	adc	r24, r24
    1bf0:	8b bf       	out	0x3b, r24	; 59
    1bf2:	07 90       	elpm	r0, Z+
    1bf4:	f6 91       	elpm	r31, Z
    1bf6:	e0 2d       	mov	r30, r0
    1bf8:	19 94       	eijmp

00001bfa <__muluhisi3>:
    1bfa:	09 d0       	rcall	.+18     	; 0x1c0e <__umulhisi3>
    1bfc:	a5 9f       	mul	r26, r21
    1bfe:	90 0d       	add	r25, r0
    1c00:	b4 9f       	mul	r27, r20
    1c02:	90 0d       	add	r25, r0
    1c04:	a4 9f       	mul	r26, r20
    1c06:	80 0d       	add	r24, r0
    1c08:	91 1d       	adc	r25, r1
    1c0a:	11 24       	eor	r1, r1
    1c0c:	08 95       	ret

00001c0e <__umulhisi3>:
    1c0e:	a2 9f       	mul	r26, r18
    1c10:	b0 01       	movw	r22, r0
    1c12:	b3 9f       	mul	r27, r19
    1c14:	c0 01       	movw	r24, r0
    1c16:	a3 9f       	mul	r26, r19
    1c18:	70 0d       	add	r23, r0
    1c1a:	81 1d       	adc	r24, r1
    1c1c:	11 24       	eor	r1, r1
    1c1e:	91 1d       	adc	r25, r1
    1c20:	b2 9f       	mul	r27, r18
    1c22:	70 0d       	add	r23, r0
    1c24:	81 1d       	adc	r24, r1
    1c26:	11 24       	eor	r1, r1
    1c28:	91 1d       	adc	r25, r1
    1c2a:	08 95       	ret

00001c2c <sprintf>:
    1c2c:	0f 93       	push	r16
    1c2e:	1f 93       	push	r17
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	2e 97       	sbiw	r28, 0x0e	; 14
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61
    1c44:	0e 89       	ldd	r16, Y+22	; 0x16
    1c46:	1f 89       	ldd	r17, Y+23	; 0x17
    1c48:	86 e0       	ldi	r24, 0x06	; 6
    1c4a:	8c 83       	std	Y+4, r24	; 0x04
    1c4c:	1a 83       	std	Y+2, r17	; 0x02
    1c4e:	09 83       	std	Y+1, r16	; 0x01
    1c50:	8f ef       	ldi	r24, 0xFF	; 255
    1c52:	9f e7       	ldi	r25, 0x7F	; 127
    1c54:	9e 83       	std	Y+6, r25	; 0x06
    1c56:	8d 83       	std	Y+5, r24	; 0x05
    1c58:	ae 01       	movw	r20, r28
    1c5a:	46 5e       	subi	r20, 0xE6	; 230
    1c5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c5e:	68 8d       	ldd	r22, Y+24	; 0x18
    1c60:	79 8d       	ldd	r23, Y+25	; 0x19
    1c62:	ce 01       	movw	r24, r28
    1c64:	01 96       	adiw	r24, 0x01	; 1
    1c66:	10 d0       	rcall	.+32     	; 0x1c88 <vfprintf>
    1c68:	ef 81       	ldd	r30, Y+7	; 0x07
    1c6a:	f8 85       	ldd	r31, Y+8	; 0x08
    1c6c:	e0 0f       	add	r30, r16
    1c6e:	f1 1f       	adc	r31, r17
    1c70:	10 82       	st	Z, r1
    1c72:	2e 96       	adiw	r28, 0x0e	; 14
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	1f 91       	pop	r17
    1c84:	0f 91       	pop	r16
    1c86:	08 95       	ret

00001c88 <vfprintf>:
    1c88:	2f 92       	push	r2
    1c8a:	3f 92       	push	r3
    1c8c:	4f 92       	push	r4
    1c8e:	5f 92       	push	r5
    1c90:	6f 92       	push	r6
    1c92:	7f 92       	push	r7
    1c94:	8f 92       	push	r8
    1c96:	9f 92       	push	r9
    1c98:	af 92       	push	r10
    1c9a:	bf 92       	push	r11
    1c9c:	cf 92       	push	r12
    1c9e:	df 92       	push	r13
    1ca0:	ef 92       	push	r14
    1ca2:	ff 92       	push	r15
    1ca4:	0f 93       	push	r16
    1ca6:	1f 93       	push	r17
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	2b 97       	sbiw	r28, 0x0b	; 11
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	6c 01       	movw	r12, r24
    1cbe:	7b 01       	movw	r14, r22
    1cc0:	8a 01       	movw	r16, r20
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	17 82       	std	Z+7, r1	; 0x07
    1cc6:	16 82       	std	Z+6, r1	; 0x06
    1cc8:	83 81       	ldd	r24, Z+3	; 0x03
    1cca:	81 ff       	sbrs	r24, 1
    1ccc:	bf c1       	rjmp	.+894    	; 0x204c <vfprintf+0x3c4>
    1cce:	ce 01       	movw	r24, r28
    1cd0:	01 96       	adiw	r24, 0x01	; 1
    1cd2:	3c 01       	movw	r6, r24
    1cd4:	f6 01       	movw	r30, r12
    1cd6:	93 81       	ldd	r25, Z+3	; 0x03
    1cd8:	f7 01       	movw	r30, r14
    1cda:	93 fd       	sbrc	r25, 3
    1cdc:	85 91       	lpm	r24, Z+
    1cde:	93 ff       	sbrs	r25, 3
    1ce0:	81 91       	ld	r24, Z+
    1ce2:	7f 01       	movw	r14, r30
    1ce4:	88 23       	and	r24, r24
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <vfprintf+0x62>
    1ce8:	ad c1       	rjmp	.+858    	; 0x2044 <vfprintf+0x3bc>
    1cea:	85 32       	cpi	r24, 0x25	; 37
    1cec:	39 f4       	brne	.+14     	; 0x1cfc <vfprintf+0x74>
    1cee:	93 fd       	sbrc	r25, 3
    1cf0:	85 91       	lpm	r24, Z+
    1cf2:	93 ff       	sbrs	r25, 3
    1cf4:	81 91       	ld	r24, Z+
    1cf6:	7f 01       	movw	r14, r30
    1cf8:	85 32       	cpi	r24, 0x25	; 37
    1cfa:	21 f4       	brne	.+8      	; 0x1d04 <vfprintf+0x7c>
    1cfc:	b6 01       	movw	r22, r12
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	d6 d1       	rcall	.+940    	; 0x20ae <fputc>
    1d02:	e8 cf       	rjmp	.-48     	; 0x1cd4 <vfprintf+0x4c>
    1d04:	91 2c       	mov	r9, r1
    1d06:	21 2c       	mov	r2, r1
    1d08:	31 2c       	mov	r3, r1
    1d0a:	ff e1       	ldi	r31, 0x1F	; 31
    1d0c:	f3 15       	cp	r31, r3
    1d0e:	d8 f0       	brcs	.+54     	; 0x1d46 <vfprintf+0xbe>
    1d10:	8b 32       	cpi	r24, 0x2B	; 43
    1d12:	79 f0       	breq	.+30     	; 0x1d32 <vfprintf+0xaa>
    1d14:	38 f4       	brcc	.+14     	; 0x1d24 <vfprintf+0x9c>
    1d16:	80 32       	cpi	r24, 0x20	; 32
    1d18:	79 f0       	breq	.+30     	; 0x1d38 <vfprintf+0xb0>
    1d1a:	83 32       	cpi	r24, 0x23	; 35
    1d1c:	a1 f4       	brne	.+40     	; 0x1d46 <vfprintf+0xbe>
    1d1e:	23 2d       	mov	r18, r3
    1d20:	20 61       	ori	r18, 0x10	; 16
    1d22:	1d c0       	rjmp	.+58     	; 0x1d5e <vfprintf+0xd6>
    1d24:	8d 32       	cpi	r24, 0x2D	; 45
    1d26:	61 f0       	breq	.+24     	; 0x1d40 <vfprintf+0xb8>
    1d28:	80 33       	cpi	r24, 0x30	; 48
    1d2a:	69 f4       	brne	.+26     	; 0x1d46 <vfprintf+0xbe>
    1d2c:	23 2d       	mov	r18, r3
    1d2e:	21 60       	ori	r18, 0x01	; 1
    1d30:	16 c0       	rjmp	.+44     	; 0x1d5e <vfprintf+0xd6>
    1d32:	83 2d       	mov	r24, r3
    1d34:	82 60       	ori	r24, 0x02	; 2
    1d36:	38 2e       	mov	r3, r24
    1d38:	e3 2d       	mov	r30, r3
    1d3a:	e4 60       	ori	r30, 0x04	; 4
    1d3c:	3e 2e       	mov	r3, r30
    1d3e:	2a c0       	rjmp	.+84     	; 0x1d94 <vfprintf+0x10c>
    1d40:	f3 2d       	mov	r31, r3
    1d42:	f8 60       	ori	r31, 0x08	; 8
    1d44:	1d c0       	rjmp	.+58     	; 0x1d80 <vfprintf+0xf8>
    1d46:	37 fc       	sbrc	r3, 7
    1d48:	2d c0       	rjmp	.+90     	; 0x1da4 <vfprintf+0x11c>
    1d4a:	20 ed       	ldi	r18, 0xD0	; 208
    1d4c:	28 0f       	add	r18, r24
    1d4e:	2a 30       	cpi	r18, 0x0A	; 10
    1d50:	40 f0       	brcs	.+16     	; 0x1d62 <vfprintf+0xda>
    1d52:	8e 32       	cpi	r24, 0x2E	; 46
    1d54:	b9 f4       	brne	.+46     	; 0x1d84 <vfprintf+0xfc>
    1d56:	36 fc       	sbrc	r3, 6
    1d58:	75 c1       	rjmp	.+746    	; 0x2044 <vfprintf+0x3bc>
    1d5a:	23 2d       	mov	r18, r3
    1d5c:	20 64       	ori	r18, 0x40	; 64
    1d5e:	32 2e       	mov	r3, r18
    1d60:	19 c0       	rjmp	.+50     	; 0x1d94 <vfprintf+0x10c>
    1d62:	36 fe       	sbrs	r3, 6
    1d64:	06 c0       	rjmp	.+12     	; 0x1d72 <vfprintf+0xea>
    1d66:	8a e0       	ldi	r24, 0x0A	; 10
    1d68:	98 9e       	mul	r9, r24
    1d6a:	20 0d       	add	r18, r0
    1d6c:	11 24       	eor	r1, r1
    1d6e:	92 2e       	mov	r9, r18
    1d70:	11 c0       	rjmp	.+34     	; 0x1d94 <vfprintf+0x10c>
    1d72:	ea e0       	ldi	r30, 0x0A	; 10
    1d74:	2e 9e       	mul	r2, r30
    1d76:	20 0d       	add	r18, r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	22 2e       	mov	r2, r18
    1d7c:	f3 2d       	mov	r31, r3
    1d7e:	f0 62       	ori	r31, 0x20	; 32
    1d80:	3f 2e       	mov	r3, r31
    1d82:	08 c0       	rjmp	.+16     	; 0x1d94 <vfprintf+0x10c>
    1d84:	8c 36       	cpi	r24, 0x6C	; 108
    1d86:	21 f4       	brne	.+8      	; 0x1d90 <vfprintf+0x108>
    1d88:	83 2d       	mov	r24, r3
    1d8a:	80 68       	ori	r24, 0x80	; 128
    1d8c:	38 2e       	mov	r3, r24
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <vfprintf+0x10c>
    1d90:	88 36       	cpi	r24, 0x68	; 104
    1d92:	41 f4       	brne	.+16     	; 0x1da4 <vfprintf+0x11c>
    1d94:	f7 01       	movw	r30, r14
    1d96:	93 fd       	sbrc	r25, 3
    1d98:	85 91       	lpm	r24, Z+
    1d9a:	93 ff       	sbrs	r25, 3
    1d9c:	81 91       	ld	r24, Z+
    1d9e:	7f 01       	movw	r14, r30
    1da0:	81 11       	cpse	r24, r1
    1da2:	b3 cf       	rjmp	.-154    	; 0x1d0a <vfprintf+0x82>
    1da4:	98 2f       	mov	r25, r24
    1da6:	9f 7d       	andi	r25, 0xDF	; 223
    1da8:	95 54       	subi	r25, 0x45	; 69
    1daa:	93 30       	cpi	r25, 0x03	; 3
    1dac:	28 f4       	brcc	.+10     	; 0x1db8 <vfprintf+0x130>
    1dae:	0c 5f       	subi	r16, 0xFC	; 252
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	9f e3       	ldi	r25, 0x3F	; 63
    1db4:	99 83       	std	Y+1, r25	; 0x01
    1db6:	0d c0       	rjmp	.+26     	; 0x1dd2 <vfprintf+0x14a>
    1db8:	83 36       	cpi	r24, 0x63	; 99
    1dba:	31 f0       	breq	.+12     	; 0x1dc8 <vfprintf+0x140>
    1dbc:	83 37       	cpi	r24, 0x73	; 115
    1dbe:	71 f0       	breq	.+28     	; 0x1ddc <vfprintf+0x154>
    1dc0:	83 35       	cpi	r24, 0x53	; 83
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <vfprintf+0x13e>
    1dc4:	55 c0       	rjmp	.+170    	; 0x1e70 <vfprintf+0x1e8>
    1dc6:	20 c0       	rjmp	.+64     	; 0x1e08 <vfprintf+0x180>
    1dc8:	f8 01       	movw	r30, r16
    1dca:	80 81       	ld	r24, Z
    1dcc:	89 83       	std	Y+1, r24	; 0x01
    1dce:	0e 5f       	subi	r16, 0xFE	; 254
    1dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd2:	88 24       	eor	r8, r8
    1dd4:	83 94       	inc	r8
    1dd6:	91 2c       	mov	r9, r1
    1dd8:	53 01       	movw	r10, r6
    1dda:	12 c0       	rjmp	.+36     	; 0x1e00 <vfprintf+0x178>
    1ddc:	28 01       	movw	r4, r16
    1dde:	f2 e0       	ldi	r31, 0x02	; 2
    1de0:	4f 0e       	add	r4, r31
    1de2:	51 1c       	adc	r5, r1
    1de4:	f8 01       	movw	r30, r16
    1de6:	a0 80       	ld	r10, Z
    1de8:	b1 80       	ldd	r11, Z+1	; 0x01
    1dea:	36 fe       	sbrs	r3, 6
    1dec:	03 c0       	rjmp	.+6      	; 0x1df4 <vfprintf+0x16c>
    1dee:	69 2d       	mov	r22, r9
    1df0:	70 e0       	ldi	r23, 0x00	; 0
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <vfprintf+0x170>
    1df4:	6f ef       	ldi	r22, 0xFF	; 255
    1df6:	7f ef       	ldi	r23, 0xFF	; 255
    1df8:	c5 01       	movw	r24, r10
    1dfa:	4e d1       	rcall	.+668    	; 0x2098 <strnlen>
    1dfc:	4c 01       	movw	r8, r24
    1dfe:	82 01       	movw	r16, r4
    1e00:	f3 2d       	mov	r31, r3
    1e02:	ff 77       	andi	r31, 0x7F	; 127
    1e04:	3f 2e       	mov	r3, r31
    1e06:	15 c0       	rjmp	.+42     	; 0x1e32 <vfprintf+0x1aa>
    1e08:	28 01       	movw	r4, r16
    1e0a:	22 e0       	ldi	r18, 0x02	; 2
    1e0c:	42 0e       	add	r4, r18
    1e0e:	51 1c       	adc	r5, r1
    1e10:	f8 01       	movw	r30, r16
    1e12:	a0 80       	ld	r10, Z
    1e14:	b1 80       	ldd	r11, Z+1	; 0x01
    1e16:	36 fe       	sbrs	r3, 6
    1e18:	03 c0       	rjmp	.+6      	; 0x1e20 <vfprintf+0x198>
    1e1a:	69 2d       	mov	r22, r9
    1e1c:	70 e0       	ldi	r23, 0x00	; 0
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <vfprintf+0x19c>
    1e20:	6f ef       	ldi	r22, 0xFF	; 255
    1e22:	7f ef       	ldi	r23, 0xFF	; 255
    1e24:	c5 01       	movw	r24, r10
    1e26:	2d d1       	rcall	.+602    	; 0x2082 <strnlen_P>
    1e28:	4c 01       	movw	r8, r24
    1e2a:	f3 2d       	mov	r31, r3
    1e2c:	f0 68       	ori	r31, 0x80	; 128
    1e2e:	3f 2e       	mov	r3, r31
    1e30:	82 01       	movw	r16, r4
    1e32:	33 fc       	sbrc	r3, 3
    1e34:	19 c0       	rjmp	.+50     	; 0x1e68 <vfprintf+0x1e0>
    1e36:	82 2d       	mov	r24, r2
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	88 16       	cp	r8, r24
    1e3c:	99 06       	cpc	r9, r25
    1e3e:	a0 f4       	brcc	.+40     	; 0x1e68 <vfprintf+0x1e0>
    1e40:	b6 01       	movw	r22, r12
    1e42:	80 e2       	ldi	r24, 0x20	; 32
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	33 d1       	rcall	.+614    	; 0x20ae <fputc>
    1e48:	2a 94       	dec	r2
    1e4a:	f5 cf       	rjmp	.-22     	; 0x1e36 <vfprintf+0x1ae>
    1e4c:	f5 01       	movw	r30, r10
    1e4e:	37 fc       	sbrc	r3, 7
    1e50:	85 91       	lpm	r24, Z+
    1e52:	37 fe       	sbrs	r3, 7
    1e54:	81 91       	ld	r24, Z+
    1e56:	5f 01       	movw	r10, r30
    1e58:	b6 01       	movw	r22, r12
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	28 d1       	rcall	.+592    	; 0x20ae <fputc>
    1e5e:	21 10       	cpse	r2, r1
    1e60:	2a 94       	dec	r2
    1e62:	21 e0       	ldi	r18, 0x01	; 1
    1e64:	82 1a       	sub	r8, r18
    1e66:	91 08       	sbc	r9, r1
    1e68:	81 14       	cp	r8, r1
    1e6a:	91 04       	cpc	r9, r1
    1e6c:	79 f7       	brne	.-34     	; 0x1e4c <vfprintf+0x1c4>
    1e6e:	e1 c0       	rjmp	.+450    	; 0x2032 <vfprintf+0x3aa>
    1e70:	84 36       	cpi	r24, 0x64	; 100
    1e72:	11 f0       	breq	.+4      	; 0x1e78 <vfprintf+0x1f0>
    1e74:	89 36       	cpi	r24, 0x69	; 105
    1e76:	39 f5       	brne	.+78     	; 0x1ec6 <vfprintf+0x23e>
    1e78:	f8 01       	movw	r30, r16
    1e7a:	37 fe       	sbrs	r3, 7
    1e7c:	07 c0       	rjmp	.+14     	; 0x1e8c <vfprintf+0x204>
    1e7e:	60 81       	ld	r22, Z
    1e80:	71 81       	ldd	r23, Z+1	; 0x01
    1e82:	82 81       	ldd	r24, Z+2	; 0x02
    1e84:	93 81       	ldd	r25, Z+3	; 0x03
    1e86:	0c 5f       	subi	r16, 0xFC	; 252
    1e88:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8a:	08 c0       	rjmp	.+16     	; 0x1e9c <vfprintf+0x214>
    1e8c:	60 81       	ld	r22, Z
    1e8e:	71 81       	ldd	r23, Z+1	; 0x01
    1e90:	07 2e       	mov	r0, r23
    1e92:	00 0c       	add	r0, r0
    1e94:	88 0b       	sbc	r24, r24
    1e96:	99 0b       	sbc	r25, r25
    1e98:	0e 5f       	subi	r16, 0xFE	; 254
    1e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9c:	f3 2d       	mov	r31, r3
    1e9e:	ff 76       	andi	r31, 0x6F	; 111
    1ea0:	3f 2e       	mov	r3, r31
    1ea2:	97 ff       	sbrs	r25, 7
    1ea4:	09 c0       	rjmp	.+18     	; 0x1eb8 <vfprintf+0x230>
    1ea6:	90 95       	com	r25
    1ea8:	80 95       	com	r24
    1eaa:	70 95       	com	r23
    1eac:	61 95       	neg	r22
    1eae:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb0:	8f 4f       	sbci	r24, 0xFF	; 255
    1eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb4:	f0 68       	ori	r31, 0x80	; 128
    1eb6:	3f 2e       	mov	r3, r31
    1eb8:	2a e0       	ldi	r18, 0x0A	; 10
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	a3 01       	movw	r20, r6
    1ebe:	33 d1       	rcall	.+614    	; 0x2126 <__ultoa_invert>
    1ec0:	88 2e       	mov	r8, r24
    1ec2:	86 18       	sub	r8, r6
    1ec4:	44 c0       	rjmp	.+136    	; 0x1f4e <vfprintf+0x2c6>
    1ec6:	85 37       	cpi	r24, 0x75	; 117
    1ec8:	31 f4       	brne	.+12     	; 0x1ed6 <vfprintf+0x24e>
    1eca:	23 2d       	mov	r18, r3
    1ecc:	2f 7e       	andi	r18, 0xEF	; 239
    1ece:	b2 2e       	mov	r11, r18
    1ed0:	2a e0       	ldi	r18, 0x0A	; 10
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	25 c0       	rjmp	.+74     	; 0x1f20 <vfprintf+0x298>
    1ed6:	93 2d       	mov	r25, r3
    1ed8:	99 7f       	andi	r25, 0xF9	; 249
    1eda:	b9 2e       	mov	r11, r25
    1edc:	8f 36       	cpi	r24, 0x6F	; 111
    1ede:	c1 f0       	breq	.+48     	; 0x1f10 <vfprintf+0x288>
    1ee0:	18 f4       	brcc	.+6      	; 0x1ee8 <vfprintf+0x260>
    1ee2:	88 35       	cpi	r24, 0x58	; 88
    1ee4:	79 f0       	breq	.+30     	; 0x1f04 <vfprintf+0x27c>
    1ee6:	ae c0       	rjmp	.+348    	; 0x2044 <vfprintf+0x3bc>
    1ee8:	80 37       	cpi	r24, 0x70	; 112
    1eea:	19 f0       	breq	.+6      	; 0x1ef2 <vfprintf+0x26a>
    1eec:	88 37       	cpi	r24, 0x78	; 120
    1eee:	21 f0       	breq	.+8      	; 0x1ef8 <vfprintf+0x270>
    1ef0:	a9 c0       	rjmp	.+338    	; 0x2044 <vfprintf+0x3bc>
    1ef2:	e9 2f       	mov	r30, r25
    1ef4:	e0 61       	ori	r30, 0x10	; 16
    1ef6:	be 2e       	mov	r11, r30
    1ef8:	b4 fe       	sbrs	r11, 4
    1efa:	0d c0       	rjmp	.+26     	; 0x1f16 <vfprintf+0x28e>
    1efc:	fb 2d       	mov	r31, r11
    1efe:	f4 60       	ori	r31, 0x04	; 4
    1f00:	bf 2e       	mov	r11, r31
    1f02:	09 c0       	rjmp	.+18     	; 0x1f16 <vfprintf+0x28e>
    1f04:	34 fe       	sbrs	r3, 4
    1f06:	0a c0       	rjmp	.+20     	; 0x1f1c <vfprintf+0x294>
    1f08:	29 2f       	mov	r18, r25
    1f0a:	26 60       	ori	r18, 0x06	; 6
    1f0c:	b2 2e       	mov	r11, r18
    1f0e:	06 c0       	rjmp	.+12     	; 0x1f1c <vfprintf+0x294>
    1f10:	28 e0       	ldi	r18, 0x08	; 8
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	05 c0       	rjmp	.+10     	; 0x1f20 <vfprintf+0x298>
    1f16:	20 e1       	ldi	r18, 0x10	; 16
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <vfprintf+0x298>
    1f1c:	20 e1       	ldi	r18, 0x10	; 16
    1f1e:	32 e0       	ldi	r19, 0x02	; 2
    1f20:	f8 01       	movw	r30, r16
    1f22:	b7 fe       	sbrs	r11, 7
    1f24:	07 c0       	rjmp	.+14     	; 0x1f34 <vfprintf+0x2ac>
    1f26:	60 81       	ld	r22, Z
    1f28:	71 81       	ldd	r23, Z+1	; 0x01
    1f2a:	82 81       	ldd	r24, Z+2	; 0x02
    1f2c:	93 81       	ldd	r25, Z+3	; 0x03
    1f2e:	0c 5f       	subi	r16, 0xFC	; 252
    1f30:	1f 4f       	sbci	r17, 0xFF	; 255
    1f32:	06 c0       	rjmp	.+12     	; 0x1f40 <vfprintf+0x2b8>
    1f34:	60 81       	ld	r22, Z
    1f36:	71 81       	ldd	r23, Z+1	; 0x01
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	0e 5f       	subi	r16, 0xFE	; 254
    1f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f40:	a3 01       	movw	r20, r6
    1f42:	f1 d0       	rcall	.+482    	; 0x2126 <__ultoa_invert>
    1f44:	88 2e       	mov	r8, r24
    1f46:	86 18       	sub	r8, r6
    1f48:	fb 2d       	mov	r31, r11
    1f4a:	ff 77       	andi	r31, 0x7F	; 127
    1f4c:	3f 2e       	mov	r3, r31
    1f4e:	36 fe       	sbrs	r3, 6
    1f50:	0d c0       	rjmp	.+26     	; 0x1f6c <vfprintf+0x2e4>
    1f52:	23 2d       	mov	r18, r3
    1f54:	2e 7f       	andi	r18, 0xFE	; 254
    1f56:	a2 2e       	mov	r10, r18
    1f58:	89 14       	cp	r8, r9
    1f5a:	58 f4       	brcc	.+22     	; 0x1f72 <vfprintf+0x2ea>
    1f5c:	34 fe       	sbrs	r3, 4
    1f5e:	0b c0       	rjmp	.+22     	; 0x1f76 <vfprintf+0x2ee>
    1f60:	32 fc       	sbrc	r3, 2
    1f62:	09 c0       	rjmp	.+18     	; 0x1f76 <vfprintf+0x2ee>
    1f64:	83 2d       	mov	r24, r3
    1f66:	8e 7e       	andi	r24, 0xEE	; 238
    1f68:	a8 2e       	mov	r10, r24
    1f6a:	05 c0       	rjmp	.+10     	; 0x1f76 <vfprintf+0x2ee>
    1f6c:	b8 2c       	mov	r11, r8
    1f6e:	a3 2c       	mov	r10, r3
    1f70:	03 c0       	rjmp	.+6      	; 0x1f78 <vfprintf+0x2f0>
    1f72:	b8 2c       	mov	r11, r8
    1f74:	01 c0       	rjmp	.+2      	; 0x1f78 <vfprintf+0x2f0>
    1f76:	b9 2c       	mov	r11, r9
    1f78:	a4 fe       	sbrs	r10, 4
    1f7a:	0f c0       	rjmp	.+30     	; 0x1f9a <vfprintf+0x312>
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	e8 0d       	add	r30, r8
    1f80:	f1 1d       	adc	r31, r1
    1f82:	80 81       	ld	r24, Z
    1f84:	80 33       	cpi	r24, 0x30	; 48
    1f86:	21 f4       	brne	.+8      	; 0x1f90 <vfprintf+0x308>
    1f88:	9a 2d       	mov	r25, r10
    1f8a:	99 7e       	andi	r25, 0xE9	; 233
    1f8c:	a9 2e       	mov	r10, r25
    1f8e:	09 c0       	rjmp	.+18     	; 0x1fa2 <vfprintf+0x31a>
    1f90:	a2 fe       	sbrs	r10, 2
    1f92:	06 c0       	rjmp	.+12     	; 0x1fa0 <vfprintf+0x318>
    1f94:	b3 94       	inc	r11
    1f96:	b3 94       	inc	r11
    1f98:	04 c0       	rjmp	.+8      	; 0x1fa2 <vfprintf+0x31a>
    1f9a:	8a 2d       	mov	r24, r10
    1f9c:	86 78       	andi	r24, 0x86	; 134
    1f9e:	09 f0       	breq	.+2      	; 0x1fa2 <vfprintf+0x31a>
    1fa0:	b3 94       	inc	r11
    1fa2:	a3 fc       	sbrc	r10, 3
    1fa4:	10 c0       	rjmp	.+32     	; 0x1fc6 <vfprintf+0x33e>
    1fa6:	a0 fe       	sbrs	r10, 0
    1fa8:	06 c0       	rjmp	.+12     	; 0x1fb6 <vfprintf+0x32e>
    1faa:	b2 14       	cp	r11, r2
    1fac:	80 f4       	brcc	.+32     	; 0x1fce <vfprintf+0x346>
    1fae:	28 0c       	add	r2, r8
    1fb0:	92 2c       	mov	r9, r2
    1fb2:	9b 18       	sub	r9, r11
    1fb4:	0d c0       	rjmp	.+26     	; 0x1fd0 <vfprintf+0x348>
    1fb6:	b2 14       	cp	r11, r2
    1fb8:	58 f4       	brcc	.+22     	; 0x1fd0 <vfprintf+0x348>
    1fba:	b6 01       	movw	r22, r12
    1fbc:	80 e2       	ldi	r24, 0x20	; 32
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	76 d0       	rcall	.+236    	; 0x20ae <fputc>
    1fc2:	b3 94       	inc	r11
    1fc4:	f8 cf       	rjmp	.-16     	; 0x1fb6 <vfprintf+0x32e>
    1fc6:	b2 14       	cp	r11, r2
    1fc8:	18 f4       	brcc	.+6      	; 0x1fd0 <vfprintf+0x348>
    1fca:	2b 18       	sub	r2, r11
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <vfprintf+0x34a>
    1fce:	98 2c       	mov	r9, r8
    1fd0:	21 2c       	mov	r2, r1
    1fd2:	a4 fe       	sbrs	r10, 4
    1fd4:	0f c0       	rjmp	.+30     	; 0x1ff4 <vfprintf+0x36c>
    1fd6:	b6 01       	movw	r22, r12
    1fd8:	80 e3       	ldi	r24, 0x30	; 48
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	68 d0       	rcall	.+208    	; 0x20ae <fputc>
    1fde:	a2 fe       	sbrs	r10, 2
    1fe0:	16 c0       	rjmp	.+44     	; 0x200e <vfprintf+0x386>
    1fe2:	a1 fc       	sbrc	r10, 1
    1fe4:	03 c0       	rjmp	.+6      	; 0x1fec <vfprintf+0x364>
    1fe6:	88 e7       	ldi	r24, 0x78	; 120
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <vfprintf+0x368>
    1fec:	88 e5       	ldi	r24, 0x58	; 88
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	b6 01       	movw	r22, r12
    1ff2:	0c c0       	rjmp	.+24     	; 0x200c <vfprintf+0x384>
    1ff4:	8a 2d       	mov	r24, r10
    1ff6:	86 78       	andi	r24, 0x86	; 134
    1ff8:	51 f0       	breq	.+20     	; 0x200e <vfprintf+0x386>
    1ffa:	a1 fe       	sbrs	r10, 1
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <vfprintf+0x37a>
    1ffe:	8b e2       	ldi	r24, 0x2B	; 43
    2000:	01 c0       	rjmp	.+2      	; 0x2004 <vfprintf+0x37c>
    2002:	80 e2       	ldi	r24, 0x20	; 32
    2004:	a7 fc       	sbrc	r10, 7
    2006:	8d e2       	ldi	r24, 0x2D	; 45
    2008:	b6 01       	movw	r22, r12
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	50 d0       	rcall	.+160    	; 0x20ae <fputc>
    200e:	89 14       	cp	r8, r9
    2010:	30 f4       	brcc	.+12     	; 0x201e <vfprintf+0x396>
    2012:	b6 01       	movw	r22, r12
    2014:	80 e3       	ldi	r24, 0x30	; 48
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	4a d0       	rcall	.+148    	; 0x20ae <fputc>
    201a:	9a 94       	dec	r9
    201c:	f8 cf       	rjmp	.-16     	; 0x200e <vfprintf+0x386>
    201e:	8a 94       	dec	r8
    2020:	f3 01       	movw	r30, r6
    2022:	e8 0d       	add	r30, r8
    2024:	f1 1d       	adc	r31, r1
    2026:	80 81       	ld	r24, Z
    2028:	b6 01       	movw	r22, r12
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	40 d0       	rcall	.+128    	; 0x20ae <fputc>
    202e:	81 10       	cpse	r8, r1
    2030:	f6 cf       	rjmp	.-20     	; 0x201e <vfprintf+0x396>
    2032:	22 20       	and	r2, r2
    2034:	09 f4       	brne	.+2      	; 0x2038 <vfprintf+0x3b0>
    2036:	4e ce       	rjmp	.-868    	; 0x1cd4 <vfprintf+0x4c>
    2038:	b6 01       	movw	r22, r12
    203a:	80 e2       	ldi	r24, 0x20	; 32
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	37 d0       	rcall	.+110    	; 0x20ae <fputc>
    2040:	2a 94       	dec	r2
    2042:	f7 cf       	rjmp	.-18     	; 0x2032 <vfprintf+0x3aa>
    2044:	f6 01       	movw	r30, r12
    2046:	86 81       	ldd	r24, Z+6	; 0x06
    2048:	97 81       	ldd	r25, Z+7	; 0x07
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <vfprintf+0x3c8>
    204c:	8f ef       	ldi	r24, 0xFF	; 255
    204e:	9f ef       	ldi	r25, 0xFF	; 255
    2050:	2b 96       	adiw	r28, 0x0b	; 11
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	f8 94       	cli
    2056:	de bf       	out	0x3e, r29	; 62
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	cd bf       	out	0x3d, r28	; 61
    205c:	df 91       	pop	r29
    205e:	cf 91       	pop	r28
    2060:	1f 91       	pop	r17
    2062:	0f 91       	pop	r16
    2064:	ff 90       	pop	r15
    2066:	ef 90       	pop	r14
    2068:	df 90       	pop	r13
    206a:	cf 90       	pop	r12
    206c:	bf 90       	pop	r11
    206e:	af 90       	pop	r10
    2070:	9f 90       	pop	r9
    2072:	8f 90       	pop	r8
    2074:	7f 90       	pop	r7
    2076:	6f 90       	pop	r6
    2078:	5f 90       	pop	r5
    207a:	4f 90       	pop	r4
    207c:	3f 90       	pop	r3
    207e:	2f 90       	pop	r2
    2080:	08 95       	ret

00002082 <strnlen_P>:
    2082:	fc 01       	movw	r30, r24
    2084:	05 90       	lpm	r0, Z+
    2086:	61 50       	subi	r22, 0x01	; 1
    2088:	70 40       	sbci	r23, 0x00	; 0
    208a:	01 10       	cpse	r0, r1
    208c:	d8 f7       	brcc	.-10     	; 0x2084 <strnlen_P+0x2>
    208e:	80 95       	com	r24
    2090:	90 95       	com	r25
    2092:	8e 0f       	add	r24, r30
    2094:	9f 1f       	adc	r25, r31
    2096:	08 95       	ret

00002098 <strnlen>:
    2098:	fc 01       	movw	r30, r24
    209a:	61 50       	subi	r22, 0x01	; 1
    209c:	70 40       	sbci	r23, 0x00	; 0
    209e:	01 90       	ld	r0, Z+
    20a0:	01 10       	cpse	r0, r1
    20a2:	d8 f7       	brcc	.-10     	; 0x209a <strnlen+0x2>
    20a4:	80 95       	com	r24
    20a6:	90 95       	com	r25
    20a8:	8e 0f       	add	r24, r30
    20aa:	9f 1f       	adc	r25, r31
    20ac:	08 95       	ret

000020ae <fputc>:
    20ae:	0f 93       	push	r16
    20b0:	1f 93       	push	r17
    20b2:	cf 93       	push	r28
    20b4:	df 93       	push	r29
    20b6:	fb 01       	movw	r30, r22
    20b8:	23 81       	ldd	r18, Z+3	; 0x03
    20ba:	21 fd       	sbrc	r18, 1
    20bc:	03 c0       	rjmp	.+6      	; 0x20c4 <fputc+0x16>
    20be:	8f ef       	ldi	r24, 0xFF	; 255
    20c0:	9f ef       	ldi	r25, 0xFF	; 255
    20c2:	2c c0       	rjmp	.+88     	; 0x211c <fputc+0x6e>
    20c4:	22 ff       	sbrs	r18, 2
    20c6:	16 c0       	rjmp	.+44     	; 0x20f4 <fputc+0x46>
    20c8:	46 81       	ldd	r20, Z+6	; 0x06
    20ca:	57 81       	ldd	r21, Z+7	; 0x07
    20cc:	24 81       	ldd	r18, Z+4	; 0x04
    20ce:	35 81       	ldd	r19, Z+5	; 0x05
    20d0:	42 17       	cp	r20, r18
    20d2:	53 07       	cpc	r21, r19
    20d4:	44 f4       	brge	.+16     	; 0x20e6 <fputc+0x38>
    20d6:	a0 81       	ld	r26, Z
    20d8:	b1 81       	ldd	r27, Z+1	; 0x01
    20da:	9d 01       	movw	r18, r26
    20dc:	2f 5f       	subi	r18, 0xFF	; 255
    20de:	3f 4f       	sbci	r19, 0xFF	; 255
    20e0:	31 83       	std	Z+1, r19	; 0x01
    20e2:	20 83       	st	Z, r18
    20e4:	8c 93       	st	X, r24
    20e6:	26 81       	ldd	r18, Z+6	; 0x06
    20e8:	37 81       	ldd	r19, Z+7	; 0x07
    20ea:	2f 5f       	subi	r18, 0xFF	; 255
    20ec:	3f 4f       	sbci	r19, 0xFF	; 255
    20ee:	37 83       	std	Z+7, r19	; 0x07
    20f0:	26 83       	std	Z+6, r18	; 0x06
    20f2:	14 c0       	rjmp	.+40     	; 0x211c <fputc+0x6e>
    20f4:	8b 01       	movw	r16, r22
    20f6:	ec 01       	movw	r28, r24
    20f8:	fb 01       	movw	r30, r22
    20fa:	00 84       	ldd	r0, Z+8	; 0x08
    20fc:	f1 85       	ldd	r31, Z+9	; 0x09
    20fe:	e0 2d       	mov	r30, r0
    2100:	19 95       	eicall
    2102:	89 2b       	or	r24, r25
    2104:	e1 f6       	brne	.-72     	; 0x20be <fputc+0x10>
    2106:	d8 01       	movw	r26, r16
    2108:	16 96       	adiw	r26, 0x06	; 6
    210a:	8d 91       	ld	r24, X+
    210c:	9c 91       	ld	r25, X
    210e:	17 97       	sbiw	r26, 0x07	; 7
    2110:	01 96       	adiw	r24, 0x01	; 1
    2112:	17 96       	adiw	r26, 0x07	; 7
    2114:	9c 93       	st	X, r25
    2116:	8e 93       	st	-X, r24
    2118:	16 97       	sbiw	r26, 0x06	; 6
    211a:	ce 01       	movw	r24, r28
    211c:	df 91       	pop	r29
    211e:	cf 91       	pop	r28
    2120:	1f 91       	pop	r17
    2122:	0f 91       	pop	r16
    2124:	08 95       	ret

00002126 <__ultoa_invert>:
    2126:	fa 01       	movw	r30, r20
    2128:	aa 27       	eor	r26, r26
    212a:	28 30       	cpi	r18, 0x08	; 8
    212c:	51 f1       	breq	.+84     	; 0x2182 <__ultoa_invert+0x5c>
    212e:	20 31       	cpi	r18, 0x10	; 16
    2130:	81 f1       	breq	.+96     	; 0x2192 <__ultoa_invert+0x6c>
    2132:	e8 94       	clt
    2134:	6f 93       	push	r22
    2136:	6e 7f       	andi	r22, 0xFE	; 254
    2138:	6e 5f       	subi	r22, 0xFE	; 254
    213a:	7f 4f       	sbci	r23, 0xFF	; 255
    213c:	8f 4f       	sbci	r24, 0xFF	; 255
    213e:	9f 4f       	sbci	r25, 0xFF	; 255
    2140:	af 4f       	sbci	r26, 0xFF	; 255
    2142:	b1 e0       	ldi	r27, 0x01	; 1
    2144:	3e d0       	rcall	.+124    	; 0x21c2 <__ultoa_invert+0x9c>
    2146:	b4 e0       	ldi	r27, 0x04	; 4
    2148:	3c d0       	rcall	.+120    	; 0x21c2 <__ultoa_invert+0x9c>
    214a:	67 0f       	add	r22, r23
    214c:	78 1f       	adc	r23, r24
    214e:	89 1f       	adc	r24, r25
    2150:	9a 1f       	adc	r25, r26
    2152:	a1 1d       	adc	r26, r1
    2154:	68 0f       	add	r22, r24
    2156:	79 1f       	adc	r23, r25
    2158:	8a 1f       	adc	r24, r26
    215a:	91 1d       	adc	r25, r1
    215c:	a1 1d       	adc	r26, r1
    215e:	6a 0f       	add	r22, r26
    2160:	71 1d       	adc	r23, r1
    2162:	81 1d       	adc	r24, r1
    2164:	91 1d       	adc	r25, r1
    2166:	a1 1d       	adc	r26, r1
    2168:	20 d0       	rcall	.+64     	; 0x21aa <__ultoa_invert+0x84>
    216a:	09 f4       	brne	.+2      	; 0x216e <__ultoa_invert+0x48>
    216c:	68 94       	set
    216e:	3f 91       	pop	r19
    2170:	2a e0       	ldi	r18, 0x0A	; 10
    2172:	26 9f       	mul	r18, r22
    2174:	11 24       	eor	r1, r1
    2176:	30 19       	sub	r19, r0
    2178:	30 5d       	subi	r19, 0xD0	; 208
    217a:	31 93       	st	Z+, r19
    217c:	de f6       	brtc	.-74     	; 0x2134 <__ultoa_invert+0xe>
    217e:	cf 01       	movw	r24, r30
    2180:	08 95       	ret
    2182:	46 2f       	mov	r20, r22
    2184:	47 70       	andi	r20, 0x07	; 7
    2186:	40 5d       	subi	r20, 0xD0	; 208
    2188:	41 93       	st	Z+, r20
    218a:	b3 e0       	ldi	r27, 0x03	; 3
    218c:	0f d0       	rcall	.+30     	; 0x21ac <__ultoa_invert+0x86>
    218e:	c9 f7       	brne	.-14     	; 0x2182 <__ultoa_invert+0x5c>
    2190:	f6 cf       	rjmp	.-20     	; 0x217e <__ultoa_invert+0x58>
    2192:	46 2f       	mov	r20, r22
    2194:	4f 70       	andi	r20, 0x0F	; 15
    2196:	40 5d       	subi	r20, 0xD0	; 208
    2198:	4a 33       	cpi	r20, 0x3A	; 58
    219a:	18 f0       	brcs	.+6      	; 0x21a2 <__ultoa_invert+0x7c>
    219c:	49 5d       	subi	r20, 0xD9	; 217
    219e:	31 fd       	sbrc	r19, 1
    21a0:	40 52       	subi	r20, 0x20	; 32
    21a2:	41 93       	st	Z+, r20
    21a4:	02 d0       	rcall	.+4      	; 0x21aa <__ultoa_invert+0x84>
    21a6:	a9 f7       	brne	.-22     	; 0x2192 <__ultoa_invert+0x6c>
    21a8:	ea cf       	rjmp	.-44     	; 0x217e <__ultoa_invert+0x58>
    21aa:	b4 e0       	ldi	r27, 0x04	; 4
    21ac:	a6 95       	lsr	r26
    21ae:	97 95       	ror	r25
    21b0:	87 95       	ror	r24
    21b2:	77 95       	ror	r23
    21b4:	67 95       	ror	r22
    21b6:	ba 95       	dec	r27
    21b8:	c9 f7       	brne	.-14     	; 0x21ac <__ultoa_invert+0x86>
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	61 05       	cpc	r22, r1
    21be:	71 05       	cpc	r23, r1
    21c0:	08 95       	ret
    21c2:	9b 01       	movw	r18, r22
    21c4:	ac 01       	movw	r20, r24
    21c6:	0a 2e       	mov	r0, r26
    21c8:	06 94       	lsr	r0
    21ca:	57 95       	ror	r21
    21cc:	47 95       	ror	r20
    21ce:	37 95       	ror	r19
    21d0:	27 95       	ror	r18
    21d2:	ba 95       	dec	r27
    21d4:	c9 f7       	brne	.-14     	; 0x21c8 <__ultoa_invert+0xa2>
    21d6:	62 0f       	add	r22, r18
    21d8:	73 1f       	adc	r23, r19
    21da:	84 1f       	adc	r24, r20
    21dc:	95 1f       	adc	r25, r21
    21de:	a0 1d       	adc	r26, r0
    21e0:	08 95       	ret

000021e2 <eeprom_read_block>:
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22

000021e6 <eeprom_read_blraw>:
    21e6:	fc 01       	movw	r30, r24
    21e8:	f9 99       	sbic	0x1f, 1	; 31
    21ea:	fe cf       	rjmp	.-4      	; 0x21e8 <eeprom_read_blraw+0x2>
    21ec:	06 c0       	rjmp	.+12     	; 0x21fa <eeprom_read_blraw+0x14>
    21ee:	f2 bd       	out	0x22, r31	; 34
    21f0:	e1 bd       	out	0x21, r30	; 33
    21f2:	f8 9a       	sbi	0x1f, 0	; 31
    21f4:	31 96       	adiw	r30, 0x01	; 1
    21f6:	00 b4       	in	r0, 0x20	; 32
    21f8:	0d 92       	st	X+, r0
    21fa:	41 50       	subi	r20, 0x01	; 1
    21fc:	50 40       	sbci	r21, 0x00	; 0
    21fe:	b8 f7       	brcc	.-18     	; 0x21ee <eeprom_read_blraw+0x8>
    2200:	08 95       	ret

00002202 <eeprom_write_block>:
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	02 c0       	rjmp	.+4      	; 0x220c <eeprom_write_block+0xa>
    2208:	2d 91       	ld	r18, X+
    220a:	05 d0       	rcall	.+10     	; 0x2216 <eeprom_write_r18>
    220c:	41 50       	subi	r20, 0x01	; 1
    220e:	50 40       	sbci	r21, 0x00	; 0
    2210:	d8 f7       	brcc	.-10     	; 0x2208 <eeprom_write_block+0x6>
    2212:	08 95       	ret

00002214 <eeprom_write_byte>:
    2214:	26 2f       	mov	r18, r22

00002216 <eeprom_write_r18>:
    2216:	f9 99       	sbic	0x1f, 1	; 31
    2218:	fe cf       	rjmp	.-4      	; 0x2216 <eeprom_write_r18>
    221a:	1f ba       	out	0x1f, r1	; 31
    221c:	92 bd       	out	0x22, r25	; 34
    221e:	81 bd       	out	0x21, r24	; 33
    2220:	20 bd       	out	0x20, r18	; 32
    2222:	0f b6       	in	r0, 0x3f	; 63
    2224:	f8 94       	cli
    2226:	fa 9a       	sbi	0x1f, 2	; 31
    2228:	f9 9a       	sbi	0x1f, 1	; 31
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	01 96       	adiw	r24, 0x01	; 1
    222e:	08 95       	ret

00002230 <_exit>:
    2230:	f8 94       	cli

00002232 <__stop_program>:
    2232:	ff cf       	rjmp	.-2      	; 0x2232 <__stop_program>
